{
    parserClass="de.bloodworkxgaming.zenscript.plugin.zsLanguage.parsing.ZsParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Zs"
    psiImplClassSuffix="Impl"
    psiPackage="de.bloodworkxgaming.zenscript.plugin.zsLanguage.psi"
    psiImplPackage="de.bloodworkxgaming.zenscript.plugin.zsLanguage.psi.impl"

    elementTypeHolderClass="de.bloodworkxgaming.zenscript.plugin.zsLanguage.psi.ZsTypes"
    elementTypeClass="de.bloodworkxgaming.zenscript.plugin.zsLanguage.psi.ZsElementType"
    tokenTypeClass="de.bloodworkxgaming.zenscript.plugin.zsLanguage.psi.ZsTokenType"

    tokens = [
        // characters
        L_ROUND_BRACKET         = "("
        R_ROUND_BRACKET         = ")"
        L_ANGLE_BRACKET         = "<"
        R_ANGLE_BRACKET         = ">"
        L_SQUARE_BRACKET        = "["
        R_SQUARE_BRACKET        = "]"
        L_CURLY_BRACKET         = "{"
        R_CURLY_BRACKET         = "}"


        EQUAL           = "="
        EXCL            = "!"
        TILDE           = "~"
        QUEST           = "?"
        COLON           = ":"
        PLUS            = "+"
        MINUS           = "-"
        ASTERISK        = "*"
        DIV             = "/"
        OR              = "|"
        XOR             = "^"
        PERC            = "%"
        AT              = "@"

        SEMICOLON       = ";"
        COMMA           = ","
        DOT             = "."

        EQEQ            = "=="
        NOT_EQUAL       = "!="
        LESS_EQUAL      = "<="
        GREATER_EQUAL   = ">="

        LINE_COMMENT    = 'regexp://.*'
        BLOCK_COMMENT   = 'regexp:/\*([^*]|\*+[^*/])*(\*+/)?'

        DOUBLE_QUOTED_STRING = "regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?"
        SINGLE_QUOTED_STRING = "regexp:'([^\\\'\r\n]|\\[^\r\n])*'?"

        DIGIT           = "regexp:[0-9]"
        DIGITS          = "regexp:-?{DIGIT}+"
        FLOATING_POINT  = "regexp:{DIGITS}\.{DIGIT}+"

        // types
        ANY         = "any"
        BOOL        = "bool"
        BYTE        = "byte"
        SHORT       = "short"
        INT         = "int"
        LONG        = "long"
        FLOAT       = "float"
        DOUBLE      = "double"
        STRING      = "string"

        // control structure
        FUNCTION    = "function"
        IN          = "in"
        VOID        = "void"
        AS          = "as"
        VERSION     = "version"
        IF          = "if"
        ELSE        = "else"
        FOR         = "for"
        RETURN      = "return"
        IMPORT      = "import"

        VAR         = "var"
        VAL         = "val"

        // constants
        NULL        = "null"
        TRUE        = "true"
        FALSE       = "false"

        EOL         = "regexp:\R"
        IDENTIFIER  = "regexp:[:jletter:] [:jletterdigit:]*"
   ]
}

zsFile ::= item_*

private item_ ::= (bracketHandler | assignStatement | property | EOL | functionCall SEMICOLON )
bracketHandler ::= L_ANGLE_BRACKET (IDENTIFIER | COLON)* R_ANGLE_BRACKET

number ::= DIGITS | FLOATING_POINT | DIGIT
validVariable ::= bracketHandler | functionCall | IDENTIFIER | number | NULL

assignStatement ::= (VAR | VAL)? IDENTIFIER EQUAL validVariable SEMICOLON
functionCall ::= IDENTIFIER DOT IDENTIFIER (L_ROUND_BRACKET R_ROUND_BRACKET | (L_ROUND_BRACKET (validVariable (COMMA validVariable)*) R_ROUND_BRACKET))

// property ::= (KEY? SEPARATOR VALUE?) | KEY
