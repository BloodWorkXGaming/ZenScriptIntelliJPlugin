/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package de.bloodworkxgaming.zenscript.plugin.zsLanguage.parsing;


import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
de.bloodworkxgaming.zenscript.plugin.zsLanguage.psi.ZsTypes;
import com.intellij.psi.TokenType;
import de.bloodworkxgaming.zenscript.plugin.zsLanguage.psi.ZsTypes;


// suppress various warnings/inspections for the generated class
@SuppressWarnings ({"FieldCanBeLocal", "UnusedDeclaration", "UnusedAssignment", "AccessStaticViaInstance", "MismatchedReadAndWriteOfArray", "WeakerAccess", "SameParameterValue", "CanBeFinal", "SameReturnValue", "RedundantThrows", "ConstantConditions"})


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>zenscript.flex</tt>
 */
final class _ZsLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int mu = 2;
  public static final int emu = 4;
  public static final int par = 6;
  public static final int comment = 8;
  public static final int comment_block = 10;
  public static final int comment_end = 12;
  public static final int data = 14;
  public static final int raw = 16;
  public static final int STRING = 18;
  public static final int WAITING_VALUE = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 14768 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21"+
    "\1\55\40\21\1\56\17\21\1\57\1\60\1\61\1\62\13\21\1\63\10\21\123\25\1\64\7"+
    "\25\1\65\1\66\37\21\1\25\1\66\u0582\21\1\67\u017f\21");

  /* The ZZ_CMAP_Y table has 3584 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11\1\7\2\10\1\12\1\13\3\0\1\14"+
    "\1\15\1\16\1\17\2\10\1\20\3\10\1\20\71\10\1\21\1\10\1\22\1\23\1\24\1\25\2"+
    "\23\16\0\1\26\1\14\1\27\1\30\2\10\1\31\11\10\1\32\21\10\1\33\1\34\23\10\1"+
    "\23\1\7\3\10\1\20\1\35\1\7\4\10\1\36\1\37\4\0\1\40\1\41\1\23\3\10\2\42\1\23"+
    "\1\43\1\44\1\0\1\45\5\10\1\46\3\0\1\47\1\50\13\10\1\51\1\40\1\52\1\53\1\0"+
    "\1\54\1\23\1\55\1\56\3\10\3\0\1\57\12\10\1\60\1\0\1\61\1\23\1\0\1\62\3\10"+
    "\1\46\1\63\1\17\2\10\1\60\1\64\1\65\1\66\2\23\3\10\1\67\10\23\1\70\1\24\6"+
    "\23\1\71\2\0\1\72\1\73\6\10\1\74\2\0\1\75\1\10\1\76\1\0\2\7\1\77\1\100\1\101"+
    "\2\10\1\70\1\102\1\103\1\104\1\105\1\55\1\106\1\76\1\0\1\107\1\44\1\77\1\110"+
    "\1\101\2\10\1\70\1\111\1\112\1\113\1\114\1\115\1\116\1\117\1\0\1\120\1\23"+
    "\1\77\1\32\1\31\2\10\1\70\1\121\1\103\1\40\1\122\1\123\1\23\1\76\1\0\1\35"+
    "\1\23\1\77\1\100\1\101\2\10\1\70\1\121\1\103\1\104\1\114\1\117\1\106\1\76"+
    "\1\0\1\35\1\23\1\124\1\125\1\126\1\127\1\130\1\125\1\10\1\131\1\132\1\133"+
    "\1\134\1\23\1\117\1\0\1\23\1\35\1\77\1\26\1\70\2\10\1\70\1\135\1\136\1\137"+
    "\1\133\1\140\1\22\1\76\1\0\2\23\1\141\1\26\1\70\2\10\1\70\1\135\1\103\1\137"+
    "\1\133\1\140\1\27\1\76\1\0\1\142\1\23\1\141\1\26\1\70\4\10\1\143\1\137\1\144"+
    "\1\55\1\23\1\76\1\0\1\23\1\34\1\141\1\10\1\20\1\34\2\10\1\31\1\145\1\20\1"+
    "\146\1\147\1\0\2\23\1\150\1\23\1\7\5\10\1\151\1\152\1\153\1\72\1\0\1\154\4"+
    "\23\1\155\1\156\1\157\1\7\1\160\1\161\1\151\1\162\1\163\1\164\1\0\1\165\4"+
    "\23\1\123\2\23\1\154\1\0\1\154\1\166\1\167\1\10\1\7\3\10\1\24\1\37\1\0\1\137"+
    "\1\170\1\0\1\37\3\0\1\43\1\171\7\23\5\10\1\46\1\0\1\172\1\0\1\154\1\60\1\173"+
    "\1\174\1\175\1\176\1\10\1\177\1\200\1\0\1\164\4\10\1\32\1\16\5\10\1\201\51"+
    "\10\1\126\1\20\1\126\5\10\1\126\4\10\1\126\1\20\1\126\1\10\1\20\7\10\1\126"+
    "\10\10\1\202\4\23\2\10\2\23\12\10\1\24\1\23\1\7\114\10\1\100\2\10\1\7\2\10"+
    "\1\42\11\10\1\125\1\123\1\23\1\10\1\26\1\203\1\23\2\10\1\203\1\23\2\10\1\204"+
    "\1\23\1\10\1\26\1\205\1\23\6\10\1\206\3\0\1\207\1\210\1\0\1\154\3\23\1\211"+
    "\1\0\1\154\13\10\1\23\5\10\1\212\10\10\1\213\1\23\3\10\1\24\1\0\1\2\1\0\1"+
    "\2\1\117\1\0\3\10\1\213\1\24\1\23\5\10\1\107\2\0\1\50\1\154\1\0\1\154\4\23"+
    "\2\10\1\153\1\2\6\10\1\170\1\72\3\0\1\104\1\0\1\154\1\0\1\154\1\36\13\23\1"+
    "\214\5\10\1\206\1\0\1\214\1\107\1\0\1\154\1\23\1\215\1\2\1\23\1\216\3\10\1"+
    "\75\1\175\1\0\1\62\4\10\1\60\1\0\1\2\1\23\4\10\1\206\2\0\1\23\1\0\1\217\1"+
    "\0\1\62\3\10\1\213\12\23\1\220\2\0\1\221\1\222\1\23\30\10\4\0\1\72\2\23\1"+
    "\71\42\10\2\213\4\10\2\213\1\10\1\223\3\10\1\213\6\10\1\26\1\163\1\224\1\24"+
    "\1\225\1\107\1\10\1\24\1\224\1\24\1\23\1\215\3\23\1\226\1\23\1\36\1\123\1"+
    "\23\1\227\1\23\1\43\1\230\1\35\1\36\2\23\1\10\1\24\3\10\1\42\2\23\1\0\1\43"+
    "\1\231\1\0\1\232\1\23\1\233\1\34\1\145\1\234\1\25\1\235\1\10\1\236\1\237\1"+
    "\240\2\23\5\10\1\123\116\23\5\10\1\20\5\10\1\20\20\10\1\24\1\241\1\242\1\23"+
    "\4\10\1\32\1\16\7\10\1\36\1\23\1\55\2\10\1\20\1\23\10\20\4\0\5\23\1\36\72"+
    "\23\1\237\3\23\1\7\1\177\1\234\1\24\1\7\11\10\1\20\1\243\1\7\12\10\1\201\1"+
    "\237\4\10\1\213\1\7\12\10\1\20\2\23\3\10\1\42\6\23\170\10\1\213\11\23\71\10"+
    "\1\24\6\23\21\10\1\24\10\23\5\10\1\213\41\10\1\24\2\10\1\0\1\242\2\23\5\10"+
    "\1\153\1\71\1\244\3\10\1\55\12\10\1\154\3\23\1\36\1\10\1\34\14\10\1\245\1"+
    "\107\1\23\1\10\1\42\11\23\1\10\1\246\1\247\2\10\1\46\2\23\1\123\6\10\1\107"+
    "\1\23\1\62\5\10\1\206\1\0\1\43\1\23\1\0\1\154\2\0\1\62\1\44\1\0\1\62\2\10"+
    "\1\60\1\164\2\10\1\153\1\0\1\2\1\23\3\10\1\24\1\73\5\10\1\46\1\0\1\232\1\36"+
    "\1\0\1\154\4\23\5\10\1\75\1\72\1\23\1\247\1\250\1\0\1\154\2\10\1\20\1\251"+
    "\6\10\1\174\1\252\1\212\2\23\1\253\1\10\1\46\1\254\1\23\3\255\1\23\2\20\22"+
    "\23\4\10\1\46\1\256\1\0\1\154\64\10\1\107\1\23\2\10\1\20\1\257\5\10\1\107"+
    "\40\23\55\10\1\213\15\10\1\22\4\23\1\20\1\23\1\257\1\260\1\10\1\70\1\20\1"+
    "\163\1\261\15\10\1\22\3\23\1\257\54\10\1\213\2\23\10\10\1\34\6\10\5\23\1\10"+
    "\1\24\2\0\2\23\1\72\1\23\1\130\2\23\1\237\3\23\1\35\1\26\20\10\1\262\1\227"+
    "\1\23\1\0\1\154\1\7\2\10\1\110\1\7\2\10\1\42\1\263\12\10\1\20\3\34\1\264\1"+
    "\265\2\23\1\266\1\10\1\135\2\10\1\20\2\10\1\267\1\10\1\213\1\10\1\213\4\23"+
    "\17\10\1\42\10\23\6\10\1\24\20\23\1\270\20\23\3\10\1\24\6\10\1\123\5\23\3"+
    "\10\1\20\2\23\3\10\1\42\6\23\3\10\1\213\4\10\1\107\1\10\1\234\5\23\23\10\1"+
    "\213\1\0\1\154\52\23\1\213\1\70\4\10\1\32\1\271\2\10\1\213\25\23\2\10\1\213"+
    "\1\23\3\10\1\22\10\23\7\10\1\263\10\23\1\272\1\71\1\135\1\7\2\10\1\107\1\113"+
    "\4\23\3\10\1\24\20\23\6\10\1\213\1\23\2\10\1\213\1\23\2\10\1\42\21\23\11\10"+
    "\1\123\66\23\1\216\6\10\1\0\1\72\3\23\1\117\1\0\2\23\1\216\5\10\1\0\1\273"+
    "\2\23\3\10\1\123\1\0\1\154\1\216\3\10\1\153\1\0\1\137\1\0\10\23\1\216\5\10"+
    "\1\46\1\0\1\274\1\23\1\0\1\154\24\23\5\10\1\46\1\0\1\23\1\0\1\154\46\23\55"+
    "\10\1\20\22\23\14\10\1\42\63\23\5\10\1\20\72\23\7\10\1\123\130\23\10\10\1"+
    "\24\1\23\1\75\4\0\1\72\1\23\1\55\1\216\1\10\14\23\1\22\153\23\1\275\1\276"+
    "\2\0\1\277\1\2\3\23\1\300\22\23\1\301\67\23\12\10\1\26\10\10\1\26\1\302\1"+
    "\303\1\10\1\304\1\135\7\10\1\32\1\305\2\26\3\10\1\306\1\163\1\34\1\70\51\10"+
    "\1\213\3\10\1\70\2\10\1\201\3\10\1\201\2\10\1\26\3\10\1\26\2\10\1\20\3\10"+
    "\1\20\3\10\1\70\3\10\1\70\2\10\1\201\1\307\6\0\1\135\3\10\1\155\1\7\1\201"+
    "\1\310\1\233\1\311\1\155\1\223\1\155\2\201\1\116\1\10\1\31\1\10\1\107\1\312"+
    "\1\31\1\10\1\107\50\23\32\10\1\20\5\23\106\10\1\24\1\23\33\10\1\213\74\23"+
    "\1\115\3\23\14\0\20\23\36\0\2\23");

  /* The ZZ_CMAP_A table has 1624 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\14\1\4\1\2\1\1\1\5\1\3\6\14\4\0\1\7\3\0\1\13\12\0\1\11\1\15\11\16\1\12"+
    "\2\0\1\12\3\0\22\13\1\0\1\6\2\0\4\13\4\0\6\14\1\10\2\14\2\0\4\13\4\0\1\13"+
    "\2\0\1\14\7\0\1\13\4\0\1\13\5\0\7\13\1\0\2\13\4\0\4\13\16\0\5\13\7\0\1\13"+
    "\1\0\1\13\1\0\5\13\1\0\2\13\6\0\1\13\1\0\3\13\1\0\1\13\1\0\4\13\1\0\13\13"+
    "\1\0\3\13\1\0\5\14\2\0\6\13\1\0\1\13\15\0\1\13\1\0\15\14\1\0\1\14\1\0\2\14"+
    "\1\0\2\14\1\0\1\14\3\13\5\0\5\14\6\0\1\13\4\0\3\14\5\0\3\13\7\14\4\0\2\13"+
    "\1\14\13\13\1\0\1\13\7\14\2\13\2\14\1\0\4\14\2\13\2\14\3\13\2\0\1\13\7\0\1"+
    "\14\1\13\1\14\6\13\3\14\2\0\11\13\3\14\1\13\6\0\2\14\6\13\4\14\2\13\2\0\2"+
    "\14\1\13\11\14\1\13\3\14\1\13\5\14\2\0\1\13\3\14\4\0\1\13\1\0\6\13\4\0\13"+
    "\14\1\0\4\14\6\13\3\14\1\13\2\14\1\13\7\14\2\13\2\14\2\0\2\14\1\0\3\14\1\0"+
    "\10\13\2\0\2\13\2\0\6\13\1\0\1\13\3\0\4\13\2\0\1\14\1\13\7\14\2\0\2\14\2\0"+
    "\3\14\1\13\5\0\2\13\1\0\5\13\4\0\3\13\4\0\2\13\1\0\2\13\1\0\2\13\1\0\2\13"+
    "\2\0\1\14\1\0\5\14\4\0\2\14\2\0\3\14\3\0\1\14\7\0\4\13\1\0\1\13\7\0\4\14\3"+
    "\13\1\14\2\0\1\13\1\0\2\13\1\0\3\13\2\14\1\0\3\14\2\0\1\13\11\0\1\14\1\13"+
    "\1\0\6\13\3\0\3\13\1\0\4\13\3\0\2\13\1\0\1\13\1\0\2\13\3\0\2\13\3\0\2\13\4"+
    "\0\5\14\3\0\3\14\1\0\4\14\2\0\1\13\6\0\1\14\4\13\1\0\5\13\3\0\1\13\7\14\1"+
    "\0\2\14\5\0\2\14\3\0\2\14\1\0\3\13\1\0\2\13\5\0\3\13\2\0\1\13\3\14\1\0\4\14"+
    "\1\13\1\0\4\13\1\0\1\13\4\0\1\14\4\0\6\14\1\0\1\14\3\0\2\14\4\0\1\13\1\14"+
    "\2\13\7\14\4\0\10\13\3\14\7\0\2\13\1\0\1\13\2\0\2\13\1\0\1\13\2\0\1\13\6\0"+
    "\4\13\1\0\3\13\1\0\1\13\1\0\1\13\2\0\2\13\1\0\3\13\2\14\1\0\2\14\1\13\2\0"+
    "\5\13\1\0\1\13\1\0\6\14\2\0\2\14\2\0\4\13\5\0\1\14\1\0\1\14\1\0\1\14\4\0\2"+
    "\14\5\13\3\14\6\0\1\14\1\0\7\14\1\13\2\14\4\13\3\14\1\13\3\14\2\13\7\14\3"+
    "\13\4\14\5\13\14\14\1\13\1\14\3\13\1\0\7\13\2\0\3\14\2\13\3\14\3\0\2\13\2"+
    "\14\4\0\1\13\1\0\2\14\4\0\4\13\10\14\3\0\1\13\3\0\2\13\1\14\5\0\3\14\2\0\1"+
    "\13\1\14\1\13\5\0\6\13\2\0\5\14\3\13\3\0\10\14\5\13\2\14\3\0\3\13\3\14\1\0"+
    "\5\14\4\13\1\14\4\13\3\14\2\13\2\0\1\13\1\0\1\13\1\0\1\13\1\0\1\13\2\0\3\13"+
    "\1\0\6\13\2\0\2\13\2\1\5\14\5\0\1\13\5\0\6\14\1\0\1\14\3\0\4\14\11\0\1\13"+
    "\4\0\1\13\1\0\5\13\2\0\1\13\1\0\4\13\1\0\3\13\2\0\4\13\5\0\5\13\4\0\1\13\4"+
    "\0\4\13\3\14\2\13\5\0\2\14\2\0\3\13\6\14\1\0\2\13\2\0\4\13\1\0\2\13\1\14\3"+
    "\13\1\14\4\13\1\14\10\13\2\14\4\0\1\13\1\14\4\0\1\14\5\13\2\14\3\0\3\13\4"+
    "\0\3\13\2\14\2\0\6\13\1\0\3\14\1\0\2\14\5\0\5\13\5\0\1\13\1\14\3\13\1\0\2"+
    "\13\1\0\7\13\2\0\1\14\6\0\2\13\2\0\3\13\3\0\2\13\3\0\2\13\2\0\3\14\4\0\3\13"+
    "\1\0\2\13\1\0\1\13\5\0\1\14\2\0\1\13\3\0\1\13\2\0\2\13\3\14\1\0\2\14\1\0\3"+
    "\14\2\0\1\14\2\0\1\14\4\13\10\0\5\14\3\0\6\14\2\0\3\14\2\0\4\14\4\0\3\14\5"+
    "\0\1\13\2\0\2\13\2\0\4\13\1\0\4\13\1\0\1\13\1\0\6\13\2\0\5\13\1\0\4\13\1\0"+
    "\4\13\2\0\2\14\1\0\1\13\1\0\1\13\5\0\1\13\1\0\1\13\1\0\3\13\1\0\3\13\1\0\3"+
    "\13");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\3\1\1\1\4\1\5\2\6"+
    "\1\3\2\7\2\10\1\3\1\10\1\0\1\11\1\0"+
    "\1\2\2\7\2\11";

  private static int [] zzUnpackAction() {
    int [] result = new int[27];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\17\0\36\0\55\0\74\0\113\0\132\0\151"+
    "\0\170\0\207\0\55\0\226\0\170\0\245\0\264\0\113"+
    "\0\303\0\322\0\341\0\132\0\360\0\322\0\264\0\377"+
    "\0\u010e\0\u011d\0\u012c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[27];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\5\2\6\1\7\1\6\1\5"+
    "\1\10\1\11\1\12\1\4\1\13\1\14\1\15\5\6"+
    "\1\15\2\6\6\15\1\16\1\17\1\20\1\17\1\21"+
    "\1\20\1\22\1\23\1\17\6\16\2\4\1\0\1\4"+
    "\2\0\1\24\1\0\2\4\1\0\5\4\1\5\1\6"+
    "\1\5\2\6\1\24\1\6\1\5\1\4\1\0\4\4"+
    "\1\0\5\6\1\0\2\6\15\0\1\4\7\0\2\4"+
    "\1\0\1\4\2\0\1\24\1\0\1\4\1\25\1\0"+
    "\4\4\17\0\2\4\1\0\1\4\2\0\1\24\1\0"+
    "\1\12\1\4\1\0\4\12\2\4\1\0\1\4\2\0"+
    "\1\24\1\0\2\4\1\0\2\4\2\14\2\16\1\0"+
    "\2\16\1\0\1\26\11\16\1\27\1\6\2\27\1\6"+
    "\1\26\2\27\7\16\1\30\1\23\1\30\1\21\1\23"+
    "\1\26\1\21\1\30\11\16\1\31\13\16\1\0\1\6"+
    "\1\23\1\6\2\23\1\0\1\23\1\6\6\0\2\25"+
    "\1\0\1\4\2\32\1\33\1\32\2\25\1\32\4\25"+
    "\1\16\1\30\1\6\2\30\1\6\1\26\2\30\13\16"+
    "\1\0\1\26\10\16\2\32\2\0\15\32\2\0\3\32"+
    "\1\25\7\32";

  private static int [] zzUnpackTrans() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\5\1\1\11\3\1\1\11\6\1\1\0\1\1"+
    "\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[27];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public _ZsLexer() {
        this(null);
  }

  public void goTo(int offset) {
    zzCurrentPos = zzMarkedPos = zzStartRead = offset;
    zzAtEOF = false;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _ZsLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(YYINITIAL); return SimpleTypes.KEY;
            }
          case 10: break;
          case 2: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          case 11: break;
          case 3: 
            { return TokenType.BAD_CHARACTER;
            }
          case 12: break;
          case 4: 
            { yybegin(WAITING_VALUE); return SimpleTypes.SEPARATOR;
            }
          case 13: break;
          case 5: 
            { return ZsTypes.IDENTIFIER;
            }
          case 14: break;
          case 6: 
            { return ZsTypes.INTEGER_LITERAL;
            }
          case 15: break;
          case 7: 
            { yybegin(YYINITIAL); return SimpleTypes.VALUE;
            }
          case 16: break;
          case 8: 
            { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE;
            }
          case 17: break;
          case 9: 
            { yybegin(YYINITIAL); return SimpleTypes.COMMENT;
            }
          case 18: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
