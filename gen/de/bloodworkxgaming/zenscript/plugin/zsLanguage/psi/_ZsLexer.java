/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package de.bloodworkxgaming.zenscript.plugin.zsLanguage.psi;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static de.bloodworkxgaming.zenscript.plugin.zsLanguage.psi.ZsTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_ZsLexer.flex</tt>
 */
public class _ZsLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\2\1\1\2\22\0\1\3\1\36\1\6\4\0\1\10\1\23\1\24\1\5\1\16\1\33\1"+
    "\11\1\14\1\4\1\12\11\13\1\34\1\17\1\25\1\0\1\26\1\35\1\0\1\71\1\0\1\61\1\0"+
    "\1\15\1\64\4\0\1\65\1\63\2\0\1\73\1\70\1\0\1\62\1\67\1\72\1\75\1\74\2\0\1"+
    "\66\1\0\1\27\1\7\1\30\1\37\2\0\1\20\1\41\1\55\1\53\1\45\1\52\1\51\1\46\1\50"+
    "\2\0\1\43\1\57\1\21\1\42\1\60\1\0\1\47\1\40\1\44\1\54\1\56\2\0\1\22\1\0\1"+
    "\31\1\0\1\32\7\0\1\1\32\0\1\3\337\0\1\3\177\0\13\3\35\0\2\1\5\0\1\3\57\0\1"+
    "\3\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\1\2\5"+
    "\1\1\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\4\1\1\2\1\0\1\20\1\21"+
    "\1\3\2\0\1\4\1\0\1\5\7\0\2\5\2\0"+
    "\1\22\3\0\1\21\1\0\1\23\2\0\1\24\2\0"+
    "\1\25\7\0\1\26\331\0\1\27\11\0\1\30\1\0"+
    "\1\31\23\0\1\32\2\0\1\33\3\0\1\34\1\35"+
    "\2\0\1\36\2\0\1\37\1\40\1\41\1\42\1\43"+
    "\6\0\1\44\2\0\1\45\2\0\1\46\1\47\3\0"+
    "\1\50\1\51\1\52\1\0\1\53\2\0\1\54\1\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\76\0\76\0\76\0\76\0\76"+
    "\0\76\0\76\0\76\0\76\0\u02aa\0\u02e8\0\u0326\0\u0364"+
    "\0\u03a2\0\u03e0\0\u041e\0\u045c\0\76\0\u049a\0\u04d8\0\76"+
    "\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8"+
    "\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\76\0\u083c\0\u087a"+
    "\0\u08b8\0\76\0\u08f6\0\76\0\u0934\0\u0972\0\76\0\u09b0"+
    "\0\u09ee\0\76\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62"+
    "\0\u0ba0\0\76\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14"+
    "\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04"+
    "\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4"+
    "\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4"+
    "\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4"+
    "\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4"+
    "\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4"+
    "\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4"+
    "\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94"+
    "\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08\0\u1e46\0\u1e84"+
    "\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074"+
    "\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264"+
    "\0\u22a2\0\u22e0\0\u231e\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454"+
    "\0\u2492\0\u24d0\0\u250e\0\u254c\0\u258a\0\u25c8\0\u2606\0\u2644"+
    "\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u277a\0\u27b8\0\u27f6\0\u2834"+
    "\0\u2872\0\u28b0\0\u28ee\0\u292c\0\u296a\0\u29a8\0\u29e6\0\u2a24"+
    "\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14"+
    "\0\u2c52\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6\0\u2e04"+
    "\0\u2e42\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a\0\u2f78\0\u2fb6\0\u2ff4"+
    "\0\u3032\0\u3070\0\u30ae\0\u30ec\0\u312a\0\u3168\0\u31a6\0\u31e4"+
    "\0\u3222\0\u3260\0\u329e\0\u32dc\0\u331a\0\u3358\0\u3396\0\u33d4"+
    "\0\u3412\0\u3450\0\u348e\0\u34cc\0\u350a\0\u3548\0\u3586\0\u35c4"+
    "\0\u3602\0\u3640\0\u367e\0\u36bc\0\u36fa\0\u3738\0\u3776\0\u37b4"+
    "\0\u37f2\0\u3830\0\u386e\0\u38ac\0\u38ea\0\u3928\0\u3966\0\u39a4"+
    "\0\u39e2\0\u3a20\0\u3a5e\0\u3a9c\0\u3ada\0\u3b18\0\u3b56\0\u3b94"+
    "\0\u3bd2\0\u3c10\0\u3c4e\0\u3c8c\0\u3cca\0\u3d08\0\u3d46\0\u3d84"+
    "\0\u3dc2\0\u3e00\0\u3e3e\0\u3e7c\0\u3eba\0\u3ef8\0\u3f36\0\u3f74"+
    "\0\u3fb2\0\u3ff0\0\u402e\0\76\0\u406c\0\u40aa\0\u40e8\0\u4126"+
    "\0\u4164\0\u41a2\0\u41e0\0\u421e\0\u425c\0\76\0\u429a\0\76"+
    "\0\u42d8\0\u4316\0\u4354\0\u4392\0\u43d0\0\u440e\0\u444c\0\u448a"+
    "\0\u44c8\0\u4506\0\u4544\0\u4582\0\u45c0\0\u45fe\0\u463c\0\u467a"+
    "\0\u46b8\0\u46f6\0\u4734\0\76\0\u4772\0\u47b0\0\76\0\u47ee"+
    "\0\u482c\0\u486a\0\76\0\76\0\u48a8\0\u48e6\0\76\0\u4924"+
    "\0\u4962\0\76\0\76\0\76\0\76\0\76\0\u49a0\0\u49de"+
    "\0\u4a1c\0\u4a5a\0\u4a98\0\u4ad6\0\76\0\u4b14\0\u4b52\0\76"+
    "\0\u4b90\0\u4bce\0\76\0\76\0\u4c0c\0\u4c4a\0\u4c88\0\76"+
    "\0\76\0\76\0\u4cc6\0\76\0\u4d04\0\u4d42\0\76\0\76";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\2\1\5\1\2\1\6\1\7"+
    "\1\10\1\11\3\2\1\12\3\2\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\24\2"+
    "\1\25\3\2\1\26\1\2\1\27\4\2\1\30\1\2"+
    "\77\0\3\31\14\0\1\32\61\0\1\33\1\34\70\0"+
    "\2\5\1\0\3\5\1\35\1\36\66\5\2\6\1\0"+
    "\4\6\1\37\1\40\65\6\12\0\1\10\1\11\76\0"+
    "\1\41\1\42\27\0\1\42\42\0\2\11\1\41\1\42"+
    "\27\0\1\42\50\0\1\32\112\0\1\43\122\0\1\44"+
    "\30\0\1\45\75\0\1\46\151\0\1\47\5\0\3\31"+
    "\113\0\1\50\54\0\1\33\2\0\73\33\5\34\1\51"+
    "\70\34\2\5\1\0\73\5\2\6\1\0\73\6\12\0"+
    "\2\52\73\0\3\53\2\0\1\53\104\0\1\54\133\0"+
    "\1\55\100\0\1\56\77\0\1\57\70\0\1\60\34\0"+
    "\1\61\53\0\4\34\1\62\1\51\70\34\12\0\2\52"+
    "\1\0\1\42\27\0\1\42\42\0\2\53\120\0\1\63"+
    "\123\0\1\64\102\0\1\65\101\0\1\66\1\0\3\67"+
    "\13\0\1\67\105\0\1\70\130\0\1\71\30\0\1\72"+
    "\117\0\1\73\127\0\1\74\44\0\1\75\127\0\1\76"+
    "\33\0\1\77\140\0\1\100\26\0\1\101\133\0\1\102"+
    "\33\0\1\103\1\104\16\0\1\105\1\106\1\0\1\107"+
    "\1\110\1\111\1\0\1\112\1\113\1\0\1\114\1\115"+
    "\2\0\1\116\57\0\1\117\111\0\1\120\65\0\1\121"+
    "\1\0\1\122\51\0\1\123\17\0\1\124\75\0\1\125"+
    "\102\0\1\126\71\0\1\127\77\0\1\130\51\0\1\131"+
    "\30\0\1\132\4\0\1\133\36\0\1\134\21\0\1\135"+
    "\1\136\10\0\1\137\63\0\1\140\53\0\1\141\21\0"+
    "\1\142\2\0\1\143\53\0\1\144\115\0\1\145\101\0"+
    "\1\146\70\0\1\147\77\0\1\150\73\0\1\151\54\0"+
    "\1\152\130\0\1\153\61\0\1\154\101\0\1\155\54\0"+
    "\1\156\20\0\1\157\54\0\1\160\132\0\1\161\60\0"+
    "\1\162\101\0\1\163\70\0\1\164\54\0\1\165\130\0"+
    "\1\166\64\0\1\167\3\0\1\170\76\0\1\171\74\0"+
    "\1\172\63\0\1\173\103\0\1\174\102\0\1\175\74\0"+
    "\1\176\73\0\1\177\73\0\1\200\103\0\1\201\71\0"+
    "\1\202\75\0\1\203\104\0\1\204\56\0\1\205\63\0"+
    "\1\206\107\0\1\207\102\0\1\210\73\0\1\211\60\0"+
    "\1\212\72\0\1\213\132\0\1\214\61\0\1\215\57\0"+
    "\1\216\75\0\1\217\125\0\1\220\62\0\1\221\73\0"+
    "\1\222\62\0\1\223\73\0\1\224\120\0\1\225\54\0"+
    "\1\226\75\0\1\227\75\0\1\230\75\0\1\231\75\0"+
    "\1\232\121\0\1\233\64\0\1\234\74\0\1\235\76\0"+
    "\1\236\106\0\1\237\73\0\1\240\65\0\1\241\104\0"+
    "\1\242\75\0\1\243\74\0\1\244\67\0\1\245\75\0"+
    "\1\246\63\0\1\247\122\0\1\250\54\0\1\251\103\0"+
    "\1\252\111\0\1\253\47\0\1\254\107\0\1\255\75\0"+
    "\1\256\75\0\1\257\75\0\1\260\75\0\1\261\61\0"+
    "\1\262\103\0\1\263\104\0\1\264\66\0\1\265\112\0"+
    "\1\266\54\0\1\267\110\0\1\270\62\0\1\271\122\0"+
    "\1\272\72\0\1\273\66\0\1\274\75\0\1\275\74\0"+
    "\1\276\102\0\1\277\72\0\1\300\74\0\1\301\62\0"+
    "\1\302\107\0\1\303\76\0\1\304\75\0\1\305\75\0"+
    "\1\306\75\0\1\307\75\0\1\310\62\0\1\311\111\0"+
    "\1\312\65\0\1\313\105\0\1\314\61\0\1\315\107\0"+
    "\1\316\67\0\1\317\103\0\1\320\102\0\1\321\56\0"+
    "\1\322\101\0\1\323\75\0\1\324\104\0\1\325\60\0"+
    "\1\326\114\0\1\327\64\0\1\330\103\0\1\331\76\0"+
    "\1\332\66\0\1\333\75\0\1\334\75\0\1\335\75\0"+
    "\1\336\75\0\1\337\103\0\1\340\100\0\1\341\74\0"+
    "\1\342\76\0\1\343\72\0\1\344\76\0\1\345\76\0"+
    "\1\346\74\0\1\347\60\0\1\350\111\0\1\351\77\0"+
    "\1\352\75\0\1\353\65\0\1\354\71\0\1\355\71\0"+
    "\1\356\115\0\1\357\74\0\1\360\66\0\1\361\105\0"+
    "\1\362\75\0\1\363\75\0\1\364\75\0\1\365\75\0"+
    "\1\366\74\0\1\367\56\0\1\370\116\0\1\371\54\0"+
    "\1\372\114\0\1\373\66\0\1\374\106\0\1\375\64\0"+
    "\1\376\71\0\1\377\110\0\1\u0100\77\0\1\u0101\75\0"+
    "\1\u0102\74\0\1\u0103\73\0\1\u0104\70\0\1\u0105\105\0"+
    "\1\u0106\64\0\1\u0107\105\0\1\u0108\76\0\1\u0109\75\0"+
    "\1\u010a\75\0\1\u010b\75\0\1\u010c\75\0\1\u010d\64\0"+
    "\1\u010e\76\0\1\u010f\64\0\1\u0110\106\0\1\u0111\74\0"+
    "\1\u0112\105\0\1\u0113\55\0\1\u0114\115\0\1\u0115\73\0"+
    "\1\u0116\67\0\1\u0117\65\0\1\u0118\75\0\1\u0119\116\0"+
    "\1\u011a\73\0\1\u011b\63\0\1\u011c\70\0\1\u011d\115\0"+
    "\1\u011e\76\0\1\u011f\54\0\1\u0120\75\0\1\u0121\75\0"+
    "\1\u0122\75\0\1\u0123\75\0\1\u0124\115\0\1\u0125\62\0"+
    "\1\u0126\101\0\1\u0127\71\0\1\u0128\110\0\1\u0129\76\0"+
    "\1\u012a\65\0\1\u012b\105\0\1\u012c\73\0\1\u012d\76\0"+
    "\1\u012e\66\0\1\u012f\75\0\1\u0130\64\0\1\u0131\105\0"+
    "\1\u0132\76\0\1\u0133\105\0\1\u0134\54\0\1\u0135\106\0"+
    "\1\u0136\75\0\1\u0137\75\0\1\u0138\75\0\1\u0139\75\0"+
    "\1\u013a\105\0\1\u013b\61\0\1\u013c\111\0\1\u013d\54\0"+
    "\1\u013e\102\0\1\u013f\70\0\1\u0140\105\0\1\u0141\106\0"+
    "\1\u0142\61\0\1\u0143\75\0\1\u0144\101\0\1\u0145\104\0"+
    "\1\u0146\62\0\1\u0147\70\0\1\u0148\106\0\1\u0149\71\0"+
    "\1\u014a\75\0\1\u014b\75\0\1\u014c\75\0\1\u014d\75\0"+
    "\1\u014e\70\0\1\u014f\75\0\1\u0150\106\0\1\u0151\75\0"+
    "\1\u0152\104\0\1\u0153\55\0\1\u0154\102\0\1\u0155\111\0"+
    "\1\u0156\65\0\1\u0157\71\0\1\u0158\101\0\1\u0159\75\0"+
    "\1\u015a\71\0\1\u015b\75\0\1\u015c\111\0\1\u015d\65\0"+
    "\1\u015e\64\0\1\u015f\102\0\1\u0160\75\0\1\u0161\75\0"+
    "\1\u0162\70\0\1\u0163\102\0\1\u0164\101\0\1\u0165\75\0"+
    "\1\u0166\71\0\1\u0167\75\0\1\u0168\51\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19840];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\11\1\11\11\5\1\1\0\2\1\1\11"+
    "\2\0\1\11\1\0\1\1\7\0\2\1\2\0\1\11"+
    "\3\0\1\11\1\0\1\11\2\0\1\11\2\0\1\11"+
    "\7\0\1\11\331\0\1\11\11\0\1\11\1\0\1\11"+
    "\23\0\1\11\2\0\1\11\3\0\2\11\2\0\1\11"+
    "\2\0\5\11\6\0\1\11\2\0\1\11\2\0\2\11"+
    "\3\0\3\11\1\0\1\11\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _ZsLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ZsLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 46: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 47: break;
          case 3: 
            { return DOUBLE_QUOTED_STRING;
            }
          case 48: break;
          case 4: 
            { return SINGLE_QUOTED_STRING;
            }
          case 49: break;
          case 5: 
            { return NUMBER;
            }
          case 50: break;
          case 6: 
            { return L_ROUND_BRACKET;
            }
          case 51: break;
          case 7: 
            { return R_ROUND_BRACKET;
            }
          case 52: break;
          case 8: 
            { return L_ANGLE_BRACKET;
            }
          case 53: break;
          case 9: 
            { return R_ANGLE_BRACKET;
            }
          case 54: break;
          case 10: 
            { return L_SQUARE_BRACKET;
            }
          case 55: break;
          case 11: 
            { return R_SQUARE_BRACKET;
            }
          case 56: break;
          case 12: 
            { return L_CURLY_BRACKET;
            }
          case 57: break;
          case 13: 
            { return R_CURLY_BRACKET;
            }
          case 58: break;
          case 14: 
            { return COMMA;
            }
          case 59: break;
          case 15: 
            { return COLON;
            }
          case 60: break;
          case 16: 
            { return LINE_COMMENT;
            }
          case 61: break;
          case 17: 
            { return BLOCK_COMMENT;
            }
          case 62: break;
          case 18: 
            { return KEY;
            }
          case 63: break;
          case 19: 
            { return CRLF;
            }
          case 64: break;
          case 20: 
            { return ANY;
            }
          case 65: break;
          case 21: 
            { return VALUE;
            }
          case 66: break;
          case 22: 
            { return SEPARATOR;
            }
          case 67: break;
          case 23: 
            { return AS;
            }
          case 68: break;
          case 24: 
            { return IN;
            }
          case 69: break;
          case 25: 
            { return IF;
            }
          case 70: break;
          case 26: 
            { return INT;
            }
          case 71: break;
          case 27: 
            { return FOR;
            }
          case 72: break;
          case 28: 
            { return VAL;
            }
          case 73: break;
          case 29: 
            { return VAR;
            }
          case 74: break;
          case 30: 
            { return NULL;
            }
          case 75: break;
          case 31: 
            { return BYTE;
            }
          case 76: break;
          case 32: 
            { return BOOL;
            }
          case 77: break;
          case 33: 
            { return LONG;
            }
          case 78: break;
          case 34: 
            { return TRUE;
            }
          case 79: break;
          case 35: 
            { return ELSE;
            }
          case 80: break;
          case 36: 
            { return VOID;
            }
          case 81: break;
          case 37: 
            { return SHORT;
            }
          case 82: break;
          case 38: 
            { return FALSE;
            }
          case 83: break;
          case 39: 
            { return FLOAT;
            }
          case 84: break;
          case 40: 
            { return STRING;
            }
          case 85: break;
          case 41: 
            { return RETURN;
            }
          case 86: break;
          case 42: 
            { return IMPORT;
            }
          case 87: break;
          case 43: 
            { return DOUBLE;
            }
          case 88: break;
          case 44: 
            { return VERSION;
            }
          case 89: break;
          case 45: 
            { return FUNCTION;
            }
          case 90: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
