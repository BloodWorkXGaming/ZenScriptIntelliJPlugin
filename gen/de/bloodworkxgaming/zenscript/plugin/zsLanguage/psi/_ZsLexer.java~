/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package de.bloodworkxgaming.zenscript.plugin.zsLanguage.psi;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static de.bloodworkxgaming.zenscript.plugin.zsLanguage.psi.ZsTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_ZsLexer.flex</tt>
 */
public class _ZsLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 14960 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21"+
    "\1\55\40\21\1\56\17\21\1\57\1\60\1\61\1\62\13\21\1\63\10\21\123\25\1\64\7"+
    "\25\1\65\1\66\37\21\1\25\1\66\u0582\21\1\67\u017f\21");

  /* The ZZ_CMAP_Y table has 3584 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
    "\17\3\0\1\20\1\21\1\22\1\23\2\24\1\25\3\24\1\25\71\24\1\26\1\24\1\27\1\30"+
    "\1\31\1\32\2\30\16\0\1\33\1\34\1\35\1\36\2\24\1\37\11\24\1\40\21\24\1\41\1"+
    "\42\23\24\1\30\1\43\3\24\1\25\1\44\1\43\4\24\1\45\1\46\4\0\1\47\1\50\1\30"+
    "\3\24\2\51\1\30\1\52\1\53\1\0\1\54\5\24\1\55\3\0\1\56\1\57\13\24\1\60\1\47"+
    "\1\61\1\62\1\0\1\63\1\30\1\64\1\65\3\24\3\0\1\66\12\24\1\67\1\0\1\70\1\30"+
    "\1\0\1\71\3\24\1\55\1\72\1\23\2\24\1\67\1\73\1\74\1\75\2\30\3\24\1\76\10\30"+
    "\1\77\1\31\6\30\1\100\2\0\1\101\1\102\6\24\1\103\2\0\1\104\1\24\1\105\1\0"+
    "\2\43\1\106\1\107\1\110\2\24\1\77\1\111\1\112\1\113\1\114\1\64\1\115\1\105"+
    "\1\0\1\116\1\53\1\106\1\117\1\110\2\24\1\77\1\120\1\121\1\122\1\123\1\124"+
    "\1\125\1\126\1\0\1\127\1\30\1\106\1\40\1\37\2\24\1\77\1\130\1\112\1\47\1\131"+
    "\1\132\1\30\1\105\1\0\1\44\1\30\1\106\1\107\1\110\2\24\1\77\1\130\1\112\1"+
    "\113\1\123\1\126\1\115\1\105\1\0\1\44\1\30\1\133\1\134\1\135\1\136\1\137\1"+
    "\134\1\24\1\140\1\141\1\142\1\143\1\30\1\126\1\0\1\30\1\44\1\106\1\33\1\77"+
    "\2\24\1\77\1\144\1\145\1\146\1\142\1\147\1\27\1\105\1\0\2\30\1\150\1\33\1"+
    "\77\2\24\1\77\1\144\1\112\1\146\1\142\1\147\1\35\1\105\1\0\1\151\1\30\1\150"+
    "\1\33\1\77\4\24\1\152\1\146\1\153\1\64\1\30\1\105\1\0\1\30\1\42\1\150\1\24"+
    "\1\25\1\42\2\24\1\37\1\154\1\25\1\155\1\156\1\0\2\30\1\157\1\30\1\43\5\24"+
    "\1\160\1\161\1\162\1\101\1\0\1\163\4\30\1\164\1\165\1\166\1\43\1\167\1\170"+
    "\1\160\1\171\1\172\1\173\1\0\1\174\4\30\1\132\2\30\1\163\1\0\1\163\1\175\1"+
    "\176\1\24\1\43\3\24\1\31\1\46\1\0\1\146\1\177\1\0\1\46\3\0\1\52\1\200\7\30"+
    "\5\24\1\55\1\0\1\201\1\0\1\163\1\67\1\202\1\203\1\204\1\205\1\24\1\206\1\207"+
    "\1\0\1\173\4\24\1\40\1\22\5\24\1\210\51\24\1\135\1\25\1\135\5\24\1\135\4\24"+
    "\1\135\1\25\1\135\1\24\1\25\7\24\1\135\10\24\1\211\4\30\2\24\2\30\12\24\1"+
    "\31\1\30\1\43\114\24\1\107\2\24\1\212\2\24\1\51\11\24\1\134\1\132\1\30\1\24"+
    "\1\33\1\213\1\30\2\24\1\213\1\30\2\24\1\214\1\30\1\24\1\33\1\215\1\30\6\24"+
    "\1\216\3\0\1\217\1\220\1\0\1\163\3\30\1\221\1\0\1\163\13\24\1\30\5\24\1\222"+
    "\10\24\1\223\1\30\3\24\1\31\1\0\1\2\1\0\1\2\1\126\1\0\3\24\1\223\1\31\1\30"+
    "\5\24\1\116\2\0\1\57\1\163\1\0\1\163\4\30\2\24\1\162\1\2\6\24\1\177\1\101"+
    "\3\0\1\113\1\0\1\163\1\0\1\163\1\45\13\30\1\224\5\24\1\216\1\0\1\224\1\116"+
    "\1\0\1\163\1\30\1\225\1\2\1\30\1\226\3\24\1\104\1\204\1\0\1\71\4\24\1\67\1"+
    "\0\1\2\1\30\4\24\1\216\2\0\1\30\1\0\1\227\1\0\1\71\3\24\1\223\12\30\1\230"+
    "\2\0\1\231\1\232\1\30\30\24\4\0\1\101\2\30\1\100\42\24\2\223\4\24\2\223\1"+
    "\24\1\233\3\24\1\223\6\24\1\33\1\172\1\234\1\31\1\235\1\116\1\24\1\31\1\234"+
    "\1\31\1\236\1\237\3\30\1\240\1\30\1\45\1\132\1\30\1\241\1\242\1\52\1\243\1"+
    "\44\1\45\2\30\1\24\1\31\3\24\1\51\2\30\1\0\1\52\1\244\1\0\1\245\1\30\1\246"+
    "\1\42\1\154\1\247\1\32\1\250\1\24\1\251\1\252\1\253\2\30\5\24\1\132\116\30"+
    "\5\24\1\25\5\24\1\25\20\24\1\31\1\254\1\255\1\30\4\24\1\40\1\22\7\24\1\45"+
    "\1\30\1\64\2\24\1\25\1\30\10\25\4\0\5\30\1\45\72\30\1\256\3\30\1\43\1\206"+
    "\1\247\1\31\1\43\11\24\1\25\1\257\1\43\12\24\1\210\1\252\4\24\1\223\1\43\12"+
    "\24\1\25\2\30\3\24\1\51\6\30\170\24\1\223\11\30\71\24\1\31\6\30\21\24\1\31"+
    "\10\30\5\24\1\223\41\24\1\31\2\24\1\0\1\255\2\30\5\24\1\162\1\100\1\260\3"+
    "\24\1\64\12\24\1\163\3\30\1\45\1\24\1\42\14\24\1\261\1\116\1\30\1\24\1\51"+
    "\11\30\1\24\1\262\1\263\2\24\1\55\2\30\1\132\6\24\1\116\1\30\1\71\5\24\1\216"+
    "\1\0\1\52\1\30\1\0\1\163\2\0\1\71\1\53\1\0\1\71\2\24\1\67\1\173\2\24\1\162"+
    "\1\0\1\2\1\30\3\24\1\31\1\102\5\24\1\55\1\0\1\245\1\45\1\0\1\163\4\30\5\24"+
    "\1\104\1\101\1\30\1\263\1\264\1\0\1\163\2\24\1\25\1\265\6\24\1\203\1\266\1"+
    "\222\2\30\1\267\1\24\1\55\1\270\1\30\3\271\1\30\2\25\22\30\4\24\1\55\1\272"+
    "\1\0\1\163\64\24\1\116\1\30\2\24\1\25\1\273\5\24\1\116\40\30\55\24\1\223\15"+
    "\24\1\27\4\30\1\25\1\30\1\273\1\274\1\24\1\77\1\25\1\172\1\275\15\24\1\27"+
    "\3\30\1\273\54\24\1\223\2\30\10\24\1\42\6\24\5\30\1\24\1\31\2\0\2\30\1\101"+
    "\1\30\1\137\2\30\1\252\3\30\1\44\1\33\20\24\1\276\1\241\1\30\1\0\1\163\1\43"+
    "\2\24\1\117\1\43\2\24\1\51\1\277\12\24\1\25\3\42\1\300\1\301\2\30\1\302\1"+
    "\24\1\144\2\24\1\25\2\24\1\303\1\24\1\223\1\24\1\223\4\30\17\24\1\51\10\30"+
    "\6\24\1\31\20\30\1\304\20\30\3\24\1\31\6\24\1\132\5\30\3\24\1\25\2\30\3\24"+
    "\1\51\6\30\3\24\1\223\4\24\1\116\1\24\1\247\5\30\23\24\1\223\1\0\1\163\52"+
    "\30\1\223\1\77\4\24\1\40\1\305\2\24\1\223\25\30\2\24\1\223\1\30\3\24\1\27"+
    "\10\30\7\24\1\277\10\30\1\306\1\100\1\144\1\43\2\24\1\116\1\122\4\30\3\24"+
    "\1\31\20\30\6\24\1\223\1\30\2\24\1\223\1\30\2\24\1\51\21\30\11\24\1\132\66"+
    "\30\1\226\6\24\1\0\1\101\3\30\1\126\1\0\2\30\1\226\5\24\1\0\1\307\2\30\3\24"+
    "\1\132\1\0\1\163\1\226\3\24\1\162\1\0\1\146\1\0\10\30\1\226\5\24\1\55\1\0"+
    "\1\310\1\30\1\0\1\163\24\30\5\24\1\55\1\0\1\30\1\0\1\163\46\30\55\24\1\25"+
    "\22\30\14\24\1\51\63\30\5\24\1\25\72\30\7\24\1\132\130\30\10\24\1\31\1\30"+
    "\1\104\4\0\1\101\1\30\1\64\1\226\1\24\14\30\1\27\153\30\1\311\1\312\2\0\1"+
    "\313\1\2\3\30\1\314\22\30\1\315\67\30\12\24\1\33\10\24\1\33\1\316\1\317\1"+
    "\24\1\320\1\144\7\24\1\40\1\321\2\33\3\24\1\322\1\172\1\42\1\77\51\24\1\223"+
    "\3\24\1\77\2\24\1\210\3\24\1\210\2\24\1\33\3\24\1\33\2\24\1\25\3\24\1\25\3"+
    "\24\1\77\3\24\1\77\2\24\1\210\1\323\6\0\1\144\3\24\1\164\1\43\1\210\1\324"+
    "\1\246\1\325\1\164\1\233\1\164\2\210\1\125\1\24\1\37\1\24\1\116\1\326\1\37"+
    "\1\24\1\116\50\30\32\24\1\25\5\30\106\24\1\31\1\30\33\24\1\223\74\30\1\124"+
    "\3\30\14\0\20\30\36\0\2\30");

  /* The ZZ_CMAP_A table has 1720 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\16\1\3\1\2\2\1\1\2\6\16\4\0\1\3\1\30\1\7\1\0\1\15\1\37\1\0\1\11\1\17\1"+
    "\20\1\6\1\34\1\42\1\12\1\14\1\4\12\13\1\33\1\41\1\21\1\27\1\22\1\32\1\40\3"+
    "\15\1\67\2\15\1\71\1\15\1\70\12\15\1\72\6\15\1\23\1\10\1\24\1\36\1\15\1\0"+
    "\1\43\1\46\1\63\1\61\1\52\1\60\1\57\1\54\1\56\2\15\1\50\1\65\1\44\1\47\1\66"+
    "\1\15\1\55\1\53\1\51\1\62\1\64\2\15\1\45\1\15\1\25\1\35\1\26\1\31\6\16\1\5"+
    "\2\16\1\3\1\0\4\15\4\0\1\15\2\0\1\16\7\0\1\15\4\0\1\15\5\0\17\15\1\0\2\15"+
    "\4\0\4\15\16\0\5\15\7\0\1\15\1\0\1\15\1\0\5\15\1\0\2\15\2\0\4\15\10\0\1\15"+
    "\1\0\3\15\1\0\1\15\1\0\4\15\1\0\13\15\1\0\3\15\1\0\5\16\2\0\6\15\1\0\7\15"+
    "\1\0\1\15\15\0\1\15\1\0\15\16\1\0\1\16\1\0\2\16\1\0\2\16\1\0\1\16\3\15\5\0"+
    "\5\16\6\0\1\15\4\0\3\16\5\0\3\15\7\16\4\0\2\15\1\16\13\15\1\0\1\15\7\16\2"+
    "\15\2\16\1\0\4\16\2\15\2\16\3\15\2\0\1\15\7\0\1\16\1\15\1\16\6\15\3\16\2\0"+
    "\11\15\3\16\1\15\6\0\2\16\6\15\4\16\2\15\2\0\2\16\1\15\11\16\1\15\3\16\1\15"+
    "\5\16\2\0\1\15\3\16\4\0\1\15\1\0\6\15\4\0\13\16\1\0\4\16\6\15\3\16\1\15\2"+
    "\16\1\15\7\16\2\15\2\16\2\0\2\16\1\0\3\16\1\0\10\15\2\0\2\15\2\0\6\15\1\0"+
    "\1\15\3\0\4\15\2\0\1\16\1\15\7\16\2\0\2\16\2\0\3\16\1\15\5\0\2\15\1\0\5\15"+
    "\4\0\3\15\4\0\2\15\1\0\2\15\1\0\2\15\1\0\2\15\2\0\1\16\1\0\5\16\4\0\2\16\2"+
    "\0\3\16\3\0\1\16\7\0\4\15\1\0\1\15\7\0\4\16\3\15\1\16\2\0\1\15\1\0\2\15\1"+
    "\0\3\15\2\16\1\0\3\16\2\0\1\15\11\0\1\16\1\15\1\0\6\15\3\0\3\15\1\0\4\15\3"+
    "\0\2\15\1\0\1\15\1\0\2\15\3\0\2\15\3\0\2\15\4\0\5\16\3\0\3\16\1\0\4\16\2\0"+
    "\1\15\6\0\1\16\4\15\1\0\5\15\3\0\1\15\7\16\1\0\2\16\5\0\2\16\3\0\2\16\1\0"+
    "\3\15\1\0\2\15\5\0\3\15\2\0\1\15\3\16\1\0\4\16\1\15\1\0\4\15\1\0\1\15\4\0"+
    "\1\16\4\0\6\16\1\0\1\16\3\0\2\16\4\0\1\15\1\16\2\15\7\16\4\0\10\15\3\16\7"+
    "\0\2\15\1\0\1\15\2\0\2\15\1\0\1\15\2\0\1\15\6\0\4\15\1\0\3\15\1\0\1\15\1\0"+
    "\1\15\2\0\2\15\1\0\3\15\2\16\1\0\2\16\1\15\2\0\5\15\1\0\1\15\1\0\6\16\2\0"+
    "\2\16\2\0\4\15\5\0\1\16\1\0\1\16\1\0\1\16\4\0\2\16\5\15\3\16\6\0\1\16\1\0"+
    "\7\16\1\15\2\16\4\15\3\16\1\15\3\16\2\15\7\16\3\15\4\16\5\15\14\16\1\15\1"+
    "\16\3\15\1\0\7\15\2\0\3\16\1\3\11\15\3\16\3\0\2\15\2\16\4\0\1\15\1\0\2\16"+
    "\4\0\4\15\10\16\3\0\1\15\3\0\2\15\1\16\5\0\3\16\2\0\1\15\1\16\1\15\5\0\6\15"+
    "\2\0\5\16\3\15\3\0\10\16\5\15\2\16\3\0\3\15\3\16\1\0\5\16\4\15\1\16\4\15\3"+
    "\16\2\15\2\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\2\0\3\15\1\0\6\15\2\0\2\15\13"+
    "\3\5\16\2\1\5\16\1\3\4\0\1\15\12\0\1\3\2\0\6\16\1\0\1\16\3\0\4\16\11\0\1\15"+
    "\4\0\1\15\1\0\5\15\2\0\1\15\1\0\4\15\1\0\3\15\2\0\4\15\5\0\5\15\4\0\1\15\4"+
    "\0\4\15\3\16\2\15\4\0\1\3\4\0\3\15\1\0\2\16\2\0\3\15\6\16\1\0\2\15\2\0\4\15"+
    "\1\0\2\15\1\16\3\15\1\16\4\15\1\16\10\15\2\16\4\0\1\15\1\16\4\0\1\16\5\15"+
    "\2\16\3\0\3\15\4\0\3\15\2\16\2\0\6\15\1\0\3\16\1\0\2\16\5\0\5\15\5\0\1\15"+
    "\1\16\3\15\1\0\2\15\1\0\7\15\2\0\1\16\6\0\2\15\2\0\3\15\3\0\2\15\3\0\2\15"+
    "\2\0\3\16\4\0\3\15\1\0\2\15\1\0\1\15\5\0\1\16\2\0\1\15\3\0\1\15\2\0\2\15\3"+
    "\16\1\0\2\16\1\0\3\16\2\0\1\16\2\0\1\16\4\15\10\0\5\16\3\0\6\16\2\0\3\16\2"+
    "\0\4\16\4\0\3\16\5\0\1\15\2\0\2\15\2\0\4\15\1\0\4\15\1\0\1\15\1\0\6\15\2\0"+
    "\5\15\1\0\4\15\1\0\4\15\2\0\2\16\1\0\1\15\1\0\1\15\5\0\1\15\1\0\1\15\1\0\3"+
    "\15\1\0\3\15\1\0\3\15");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\16\11\1\36"+
    "\1\37\1\5\2\0\1\6\1\40\1\41\1\42\1\43"+
    "\1\44\1\11\1\45\11\11\1\46\1\47\13\11\2\0"+
    "\1\50\11\11\1\51\2\11\1\52\3\11\1\53\1\54"+
    "\4\11\1\37\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\10\11\1\64\4\11\1\65\2\11\1\66\1\67"+
    "\4\11\1\70\1\71\1\72\1\73\1\11\1\74\3\11"+
    "\1\75\1\11\1\76\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\73\0\354\0\u0127\0\u0162"+
    "\0\73\0\u019d\0\73\0\73\0\u01d8\0\u0213\0\73\0\73"+
    "\0\73\0\73\0\u024e\0\u0289\0\73\0\73\0\73\0\73"+
    "\0\73\0\73\0\73\0\73\0\73\0\73\0\u02c4\0\u02ff"+
    "\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7"+
    "\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\73\0\u0674"+
    "\0\u06af\0\73\0\u06ea\0\73\0\73\0\73\0\73\0\u0725"+
    "\0\u019d\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c\0\u0887\0\u08c2"+
    "\0\u08fd\0\u0938\0\u0973\0\u019d\0\u09ae\0\u09e9\0\u0a24\0\u0a5f"+
    "\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37"+
    "\0\u0c72\0\u019d\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4"+
    "\0\u0e0f\0\u0e4a\0\u0e85\0\u019d\0\u0ec0\0\u0efb\0\u019d\0\u0f36"+
    "\0\u0f71\0\u0fac\0\u019d\0\u019d\0\u0fe7\0\u1022\0\u105d\0\u1098"+
    "\0\73\0\u0c72\0\u019d\0\u019d\0\u019d\0\u019d\0\u019d\0\u019d"+
    "\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270"+
    "\0\u019d\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u019d\0\u1397\0\u13d2"+
    "\0\u019d\0\u019d\0\u140d\0\u1448\0\u1483\0\u14be\0\u019d\0\u019d"+
    "\0\u019d\0\u019d\0\u14f9\0\u019d\0\u1534\0\u156f\0\u15aa\0\u019d"+
    "\0\u15e5\0\u019d\0\u019d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\3\1\5\1\6\1\2\1\7"+
    "\1\10\1\2\1\11\1\12\1\2\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\12\1\41\1\12\1\42\1\43"+
    "\1\44\1\45\1\12\1\46\1\47\1\12\1\50\1\51"+
    "\2\12\1\52\1\12\1\53\1\54\3\12\74\0\3\3"+
    "\1\0\1\3\71\0\1\55\1\0\1\56\64\0\2\6"+
    "\1\0\4\6\1\57\1\60\62\6\2\7\1\0\5\7"+
    "\1\61\1\62\61\7\13\0\1\63\64\0\1\12\5\0"+
    "\1\12\1\0\2\12\24\0\30\12\27\0\1\64\72\0"+
    "\1\65\72\0\1\66\72\0\1\67\50\0\1\12\5\0"+
    "\1\12\1\0\2\12\24\0\1\12\1\70\6\12\1\71"+
    "\17\12\5\0\1\12\5\0\1\12\1\0\2\12\24\0"+
    "\17\12\1\72\10\12\5\0\1\12\5\0\1\12\1\0"+
    "\2\12\24\0\2\12\1\73\1\12\1\74\23\12\5\0"+
    "\1\12\5\0\1\12\1\0\2\12\24\0\4\12\1\75"+
    "\23\12\5\0\1\12\5\0\1\12\1\0\2\12\24\0"+
    "\12\12\1\76\15\12\5\0\1\12\5\0\1\12\1\0"+
    "\2\12\24\0\5\12\1\77\22\12\5\0\1\12\5\0"+
    "\1\12\1\0\2\12\24\0\6\12\1\100\2\12\1\101"+
    "\16\12\5\0\1\12\5\0\1\12\1\0\2\12\24\0"+
    "\7\12\1\102\20\12\5\0\1\12\5\0\1\12\1\0"+
    "\2\12\24\0\1\12\1\103\13\12\1\104\4\12\1\105"+
    "\5\12\5\0\1\12\5\0\1\12\1\0\2\12\24\0"+
    "\1\106\3\12\1\107\1\110\11\12\1\111\10\12\5\0"+
    "\1\12\5\0\1\12\1\0\2\12\24\0\4\12\1\112"+
    "\23\12\5\0\1\12\5\0\1\12\1\0\2\12\24\0"+
    "\1\113\3\12\1\114\2\12\1\115\20\12\5\0\1\12"+
    "\5\0\1\12\1\0\2\12\24\0\12\12\1\116\15\12"+
    "\5\0\1\12\5\0\1\12\1\0\2\12\24\0\25\12"+
    "\1\117\2\12\1\55\2\0\2\55\1\0\65\55\6\56"+
    "\1\120\64\56\2\6\1\0\70\6\2\7\1\0\70\7"+
    "\13\0\1\63\1\121\63\0\1\12\5\0\1\12\1\0"+
    "\2\12\24\0\2\12\1\122\25\12\5\0\1\12\5\0"+
    "\1\12\1\0\2\12\24\0\5\12\1\123\22\12\5\0"+
    "\1\12\5\0\1\12\1\0\2\12\24\0\6\12\1\124"+
    "\21\12\5\0\1\12\5\0\1\12\1\0\2\12\24\0"+
    "\4\12\1\125\23\12\5\0\1\12\5\0\1\12\1\0"+
    "\2\12\24\0\1\12\1\126\26\12\5\0\1\12\5\0"+
    "\1\12\1\0\2\12\24\0\17\12\1\127\10\12\5\0"+
    "\1\12\5\0\1\12\1\0\2\12\24\0\10\12\1\130"+
    "\17\12\5\0\1\12\5\0\1\12\1\0\2\12\24\0"+
    "\12\12\1\131\15\12\5\0\1\12\5\0\1\12\1\0"+
    "\2\12\24\0\4\12\1\132\23\12\5\0\1\12\5\0"+
    "\1\12\1\0\2\12\24\0\6\12\1\133\21\12\5\0"+
    "\1\12\5\0\1\12\1\0\2\12\24\0\6\12\1\134"+
    "\21\12\5\0\1\12\5\0\1\12\1\0\2\12\24\0"+
    "\23\12\1\135\4\12\5\0\1\12\5\0\1\12\1\0"+
    "\2\12\24\0\5\12\1\136\22\12\5\0\1\12\5\0"+
    "\1\12\1\0\2\12\24\0\12\12\1\137\15\12\5\0"+
    "\1\12\5\0\1\12\1\0\2\12\24\0\4\12\1\140"+
    "\23\12\5\0\1\12\5\0\1\12\1\0\2\12\24\0"+
    "\1\12\1\141\26\12\5\0\1\12\5\0\1\12\1\0"+
    "\2\12\24\0\17\12\1\142\10\12\5\0\1\12\5\0"+
    "\1\12\1\0\2\12\24\0\5\12\1\143\4\12\1\144"+
    "\15\12\5\0\1\12\5\0\1\12\1\0\2\12\24\0"+
    "\13\12\1\145\14\12\5\0\1\12\5\0\1\12\1\0"+
    "\2\12\24\0\12\12\1\146\15\12\5\0\1\12\5\0"+
    "\1\12\1\0\2\12\24\0\4\12\1\147\23\12\5\0"+
    "\1\12\5\0\1\12\1\0\2\12\24\0\26\12\1\150"+
    "\1\12\4\56\1\151\1\56\1\120\64\56\13\0\1\152"+
    "\64\0\1\12\5\0\1\12\1\0\2\12\24\0\5\12"+
    "\1\153\22\12\5\0\1\12\5\0\1\12\1\0\2\12"+
    "\24\0\7\12\1\154\20\12\5\0\1\12\5\0\1\12"+
    "\1\0\2\12\24\0\5\12\1\155\22\12\5\0\1\12"+
    "\5\0\1\12\1\0\2\12\24\0\14\12\1\156\13\12"+
    "\5\0\1\12\5\0\1\12\1\0\2\12\24\0\7\12"+
    "\1\157\20\12\5\0\1\12\5\0\1\12\1\0\2\12"+
    "\24\0\7\12\1\160\20\12\5\0\1\12\5\0\1\12"+
    "\1\0\2\12\24\0\13\12\1\161\14\12\5\0\1\12"+
    "\5\0\1\12\1\0\2\12\24\0\12\12\1\162\15\12"+
    "\5\0\1\12\5\0\1\12\1\0\2\12\24\0\17\12"+
    "\1\163\10\12\5\0\1\12\5\0\1\12\1\0\2\12"+
    "\24\0\4\12\1\164\23\12\5\0\1\12\5\0\1\12"+
    "\1\0\2\12\24\0\10\12\1\165\17\12\5\0\1\12"+
    "\5\0\1\12\1\0\2\12\24\0\1\166\27\12\5\0"+
    "\1\12\5\0\1\12\1\0\2\12\24\0\20\12\1\167"+
    "\7\12\5\0\1\12\5\0\1\12\1\0\2\12\24\0"+
    "\3\12\1\170\24\12\5\0\1\12\5\0\1\12\1\0"+
    "\2\12\24\0\16\12\1\171\11\12\5\0\1\12\5\0"+
    "\1\12\1\0\2\12\24\0\10\12\1\172\17\12\5\0"+
    "\1\12\5\0\1\12\1\0\2\12\24\0\23\12\1\173"+
    "\4\12\5\0\1\12\5\0\1\12\1\0\2\12\24\0"+
    "\25\12\1\174\2\12\5\0\1\12\5\0\1\12\1\0"+
    "\2\12\24\0\1\12\1\175\26\12\5\0\1\12\5\0"+
    "\1\12\1\0\2\12\24\0\6\12\1\176\21\12\5\0"+
    "\1\12\5\0\1\12\1\0\2\12\24\0\12\12\1\177"+
    "\15\12\5\0\1\12\5\0\1\12\1\0\2\12\24\0"+
    "\12\12\1\200\15\12\5\0\1\12\5\0\1\12\1\0"+
    "\2\12\24\0\7\12\1\201\20\12\5\0\1\12\5\0"+
    "\1\12\1\0\2\12\24\0\6\12\1\202\21\12\5\0"+
    "\1\12\5\0\1\12\1\0\2\12\24\0\6\12\1\203"+
    "\21\12\5\0\1\12\5\0\1\12\1\0\2\12\24\0"+
    "\5\12\1\204\22\12\5\0\1\12\5\0\1\12\1\0"+
    "\2\12\24\0\13\12\1\205\14\12\5\0\1\12\5\0"+
    "\1\12\1\0\2\12\24\0\7\12\1\206\20\12\5\0"+
    "\1\12\5\0\1\12\1\0\2\12\24\0\27\12\1\207"+
    "\5\0\1\12\5\0\1\12\1\0\2\12\24\0\14\12"+
    "\1\210\13\12\5\0\1\12\5\0\1\12\1\0\2\12"+
    "\24\0\1\12\1\211\26\12\5\0\1\12\5\0\1\12"+
    "\1\0\2\12\24\0\6\12\1\212\21\12\5\0\1\12"+
    "\5\0\1\12\1\0\2\12\24\0\13\12\1\213\14\12"+
    "\5\0\1\12\5\0\1\12\1\0\2\12\24\0\7\12"+
    "\1\214\20\12\5\0\1\12\5\0\1\12\1\0\2\12"+
    "\24\0\4\12\1\215\23\12\5\0\1\12\5\0\1\12"+
    "\1\0\2\12\24\0\12\12\1\216\15\12\5\0\1\12"+
    "\5\0\1\12\1\0\2\12\24\0\4\12\1\217\23\12"+
    "\5\0\1\12\5\0\1\12\1\0\2\12\24\0\1\12"+
    "\1\220\26\12\5\0\1\12\5\0\1\12\1\0\2\12"+
    "\24\0\6\12\1\221\21\12\5\0\1\12\5\0\1\12"+
    "\1\0\2\12\24\0\1\12\1\222\26\12\5\0\1\12"+
    "\5\0\1\12\1\0\2\12\24\0\2\12\1\223\25\12";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5664];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\3\1\1\11\1\1\2\11"+
    "\2\1\4\11\2\1\12\11\20\1\1\11\2\0\1\11"+
    "\1\1\4\11\30\1\2\0\27\1\1\11\52\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _ZsLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ZsLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 64: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 65: break;
          case 3: 
            { return DIV;
            }
          case 66: break;
          case 4: 
            { return ASTERISK;
            }
          case 67: break;
          case 5: 
            { return DOUBLE_QUOTED_STRING;
            }
          case 68: break;
          case 6: 
            { return SINGLE_QUOTED_STRING;
            }
          case 69: break;
          case 7: 
            { return MINUS;
            }
          case 70: break;
          case 8: 
            { return DOT;
            }
          case 71: break;
          case 9: 
            { return IDENTIFIER;
            }
          case 72: break;
          case 10: 
            { return L_ROUND_BRACKET;
            }
          case 73: break;
          case 11: 
            { return R_ROUND_BRACKET;
            }
          case 74: break;
          case 12: 
            { return L_ANGLE_BRACKET;
            }
          case 75: break;
          case 13: 
            { return R_ANGLE_BRACKET;
            }
          case 76: break;
          case 14: 
            { return L_SQUARE_BRACKET;
            }
          case 77: break;
          case 15: 
            { return R_SQUARE_BRACKET;
            }
          case 78: break;
          case 16: 
            { return L_CURLY_BRACKET;
            }
          case 79: break;
          case 17: 
            { return R_CURLY_BRACKET;
            }
          case 80: break;
          case 18: 
            { return EQUAL;
            }
          case 81: break;
          case 19: 
            { return EXCL;
            }
          case 82: break;
          case 20: 
            { return TILDE;
            }
          case 83: break;
          case 21: 
            { return QUEST;
            }
          case 84: break;
          case 22: 
            { return COLON;
            }
          case 85: break;
          case 23: 
            { return PLUS;
            }
          case 86: break;
          case 24: 
            { return OR;
            }
          case 87: break;
          case 25: 
            { return XOR;
            }
          case 88: break;
          case 26: 
            { return PERC;
            }
          case 89: break;
          case 27: 
            { return AT;
            }
          case 90: break;
          case 28: 
            { return SEMICOLON;
            }
          case 91: break;
          case 29: 
            { return COMMA;
            }
          case 92: break;
          case 30: 
            { return LINE_COMMENT;
            }
          case 93: break;
          case 31: 
            { return BLOCK_COMMENT;
            }
          case 94: break;
          case 32: 
            { return DIGITS;
            }
          case 95: break;
          case 33: 
            { return LESS_EQUAL;
            }
          case 96: break;
          case 34: 
            { return GREATER_EQUAL;
            }
          case 97: break;
          case 35: 
            { return EQEQ;
            }
          case 98: break;
          case 36: 
            { return NOT_EQUAL;
            }
          case 99: break;
          case 37: 
            { return AS;
            }
          case 100: break;
          case 38: 
            { return IN;
            }
          case 101: break;
          case 39: 
            { return IF;
            }
          case 102: break;
          case 40: 
            { return ANY;
            }
          case 103: break;
          case 41: 
            { return INT;
            }
          case 104: break;
          case 42: 
            { return FOR;
            }
          case 105: break;
          case 43: 
            { return VAL;
            }
          case 106: break;
          case 44: 
            { return VAR;
            }
          case 107: break;
          case 45: 
            { return FLOATING_POINT;
            }
          case 108: break;
          case 46: 
            { return NULL;
            }
          case 109: break;
          case 47: 
            { return BYTE;
            }
          case 110: break;
          case 48: 
            { return BOOL;
            }
          case 111: break;
          case 49: 
            { return LONG;
            }
          case 112: break;
          case 50: 
            { return TRUE;
            }
          case 113: break;
          case 51: 
            { return ELSE;
            }
          case 114: break;
          case 52: 
            { return VOID;
            }
          case 115: break;
          case 53: 
            { return SHORT;
            }
          case 116: break;
          case 54: 
            { return FALSE;
            }
          case 117: break;
          case 55: 
            { return FLOAT;
            }
          case 118: break;
          case 56: 
            { return DIGIT;
            }
          case 119: break;
          case 57: 
            { return STRING;
            }
          case 120: break;
          case 58: 
            { return RETURN;
            }
          case 121: break;
          case 59: 
            { return IMPORT;
            }
          case 122: break;
          case 60: 
            { return DOUBLE;
            }
          case 123: break;
          case 61: 
            { return VERSION;
            }
          case 124: break;
          case 62: 
            { return FUNCTION;
            }
          case 125: break;
          case 63: 
            { return PROPERTY;
            }
          case 126: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
