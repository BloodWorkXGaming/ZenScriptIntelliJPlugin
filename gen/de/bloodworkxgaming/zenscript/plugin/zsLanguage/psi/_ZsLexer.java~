/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package de.bloodworkxgaming.zenscript.plugin.zsLanguage.psi;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static de.bloodworkxgaming.zenscript.plugin.zsLanguage.psi.ZsTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_ZsLexer.flex</tt>
 */
public class _ZsLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 14928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21"+
    "\1\55\40\21\1\56\17\21\1\57\1\60\1\61\1\62\13\21\1\63\10\21\123\25\1\64\7"+
    "\25\1\65\1\66\37\21\1\25\1\66\u0582\21\1\67\u017f\21");

  /* The ZZ_CMAP_Y table has 3584 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11\1\12\1\13\1\14\1\15\1\16\3"+
    "\0\1\17\1\20\1\21\1\22\2\10\1\23\3\10\1\23\71\10\1\24\1\10\1\25\1\26\1\27"+
    "\1\30\2\26\16\0\1\31\1\32\1\33\1\34\2\10\1\35\11\10\1\36\21\10\1\37\1\40\23"+
    "\10\1\26\1\41\3\10\1\23\1\42\1\41\4\10\1\43\1\44\4\0\1\45\1\46\1\26\3\10\2"+
    "\47\1\26\1\50\1\51\1\0\1\52\5\10\1\53\3\0\1\54\1\55\13\10\1\56\1\45\1\57\1"+
    "\60\1\0\1\61\1\26\1\62\1\63\3\10\3\0\1\64\12\10\1\65\1\0\1\66\1\26\1\0\1\67"+
    "\3\10\1\53\1\70\1\22\2\10\1\65\1\71\1\72\1\73\2\26\3\10\1\74\10\26\1\75\1"+
    "\27\6\26\1\76\2\0\1\77\1\100\6\10\1\101\2\0\1\102\1\10\1\103\1\0\2\41\1\104"+
    "\1\105\1\106\2\10\1\75\1\107\1\110\1\111\1\112\1\62\1\113\1\103\1\0\1\114"+
    "\1\51\1\104\1\115\1\106\2\10\1\75\1\116\1\117\1\120\1\121\1\122\1\123\1\124"+
    "\1\0\1\125\1\26\1\104\1\36\1\35\2\10\1\75\1\126\1\110\1\45\1\127\1\130\1\26"+
    "\1\103\1\0\1\42\1\26\1\104\1\105\1\106\2\10\1\75\1\126\1\110\1\111\1\121\1"+
    "\124\1\113\1\103\1\0\1\42\1\26\1\131\1\132\1\133\1\134\1\135\1\132\1\10\1"+
    "\136\1\137\1\140\1\141\1\26\1\124\1\0\1\26\1\42\1\104\1\31\1\75\2\10\1\75"+
    "\1\142\1\143\1\144\1\140\1\145\1\25\1\103\1\0\2\26\1\146\1\31\1\75\2\10\1"+
    "\75\1\142\1\110\1\144\1\140\1\145\1\33\1\103\1\0\1\147\1\26\1\146\1\31\1\75"+
    "\4\10\1\150\1\144\1\151\1\62\1\26\1\103\1\0\1\26\1\40\1\146\1\10\1\23\1\40"+
    "\2\10\1\35\1\152\1\23\1\153\1\154\1\0\2\26\1\155\1\26\1\41\5\10\1\156\1\157"+
    "\1\160\1\77\1\0\1\161\4\26\1\162\1\163\1\164\1\41\1\165\1\166\1\156\1\167"+
    "\1\170\1\171\1\0\1\172\4\26\1\130\2\26\1\161\1\0\1\161\1\173\1\174\1\10\1"+
    "\41\3\10\1\27\1\44\1\0\1\144\1\175\1\0\1\44\3\0\1\50\1\176\7\26\5\10\1\53"+
    "\1\0\1\177\1\0\1\161\1\65\1\200\1\201\1\202\1\203\1\10\1\204\1\205\1\0\1\171"+
    "\4\10\1\36\1\21\5\10\1\206\51\10\1\133\1\23\1\133\5\10\1\133\4\10\1\133\1"+
    "\23\1\133\1\10\1\23\7\10\1\133\10\10\1\207\4\26\2\10\2\26\12\10\1\27\1\26"+
    "\1\41\114\10\1\105\2\10\1\210\2\10\1\47\11\10\1\132\1\130\1\26\1\10\1\31\1"+
    "\211\1\26\2\10\1\211\1\26\2\10\1\212\1\26\1\10\1\31\1\213\1\26\6\10\1\214"+
    "\3\0\1\215\1\216\1\0\1\161\3\26\1\217\1\0\1\161\13\10\1\26\5\10\1\220\10\10"+
    "\1\221\1\26\3\10\1\27\1\0\1\2\1\0\1\2\1\124\1\0\3\10\1\221\1\27\1\26\5\10"+
    "\1\114\2\0\1\55\1\161\1\0\1\161\4\26\2\10\1\160\1\2\6\10\1\175\1\77\3\0\1"+
    "\111\1\0\1\161\1\0\1\161\1\43\13\26\1\222\5\10\1\214\1\0\1\222\1\114\1\0\1"+
    "\161\1\26\1\223\1\2\1\26\1\224\3\10\1\102\1\202\1\0\1\67\4\10\1\65\1\0\1\2"+
    "\1\26\4\10\1\214\2\0\1\26\1\0\1\225\1\0\1\67\3\10\1\221\12\26\1\226\2\0\1"+
    "\227\1\230\1\26\30\10\4\0\1\77\2\26\1\76\42\10\2\221\4\10\2\221\1\10\1\231"+
    "\3\10\1\221\6\10\1\31\1\170\1\232\1\27\1\233\1\114\1\10\1\27\1\232\1\27\1"+
    "\234\1\235\3\26\1\236\1\26\1\43\1\130\1\26\1\237\1\240\1\50\1\241\1\42\1\43"+
    "\2\26\1\10\1\27\3\10\1\47\2\26\1\0\1\50\1\242\1\0\1\243\1\26\1\244\1\40\1"+
    "\152\1\245\1\30\1\246\1\10\1\247\1\250\1\251\2\26\5\10\1\130\116\26\5\10\1"+
    "\23\5\10\1\23\20\10\1\27\1\252\1\253\1\26\4\10\1\36\1\21\7\10\1\43\1\26\1"+
    "\62\2\10\1\23\1\26\10\23\4\0\5\26\1\43\72\26\1\254\3\26\1\41\1\204\1\245\1"+
    "\27\1\41\11\10\1\23\1\255\1\41\12\10\1\206\1\250\4\10\1\221\1\41\12\10\1\23"+
    "\2\26\3\10\1\47\6\26\170\10\1\221\11\26\71\10\1\27\6\26\21\10\1\27\10\26\5"+
    "\10\1\221\41\10\1\27\2\10\1\0\1\253\2\26\5\10\1\160\1\76\1\256\3\10\1\62\12"+
    "\10\1\161\3\26\1\43\1\10\1\40\14\10\1\257\1\114\1\26\1\10\1\47\11\26\1\10"+
    "\1\260\1\261\2\10\1\53\2\26\1\130\6\10\1\114\1\26\1\67\5\10\1\214\1\0\1\50"+
    "\1\26\1\0\1\161\2\0\1\67\1\51\1\0\1\67\2\10\1\65\1\171\2\10\1\160\1\0\1\2"+
    "\1\26\3\10\1\27\1\100\5\10\1\53\1\0\1\243\1\43\1\0\1\161\4\26\5\10\1\102\1"+
    "\77\1\26\1\261\1\262\1\0\1\161\2\10\1\23\1\263\6\10\1\201\1\264\1\220\2\26"+
    "\1\265\1\10\1\53\1\266\1\26\3\267\1\26\2\23\22\26\4\10\1\53\1\270\1\0\1\161"+
    "\64\10\1\114\1\26\2\10\1\23\1\271\5\10\1\114\40\26\55\10\1\221\15\10\1\25"+
    "\4\26\1\23\1\26\1\271\1\272\1\10\1\75\1\23\1\170\1\273\15\10\1\25\3\26\1\271"+
    "\54\10\1\221\2\26\10\10\1\40\6\10\5\26\1\10\1\27\2\0\2\26\1\77\1\26\1\135"+
    "\2\26\1\250\3\26\1\42\1\31\20\10\1\274\1\237\1\26\1\0\1\161\1\41\2\10\1\115"+
    "\1\41\2\10\1\47\1\275\12\10\1\23\3\40\1\276\1\277\2\26\1\300\1\10\1\142\2"+
    "\10\1\23\2\10\1\301\1\10\1\221\1\10\1\221\4\26\17\10\1\47\10\26\6\10\1\27"+
    "\20\26\1\302\20\26\3\10\1\27\6\10\1\130\5\26\3\10\1\23\2\26\3\10\1\47\6\26"+
    "\3\10\1\221\4\10\1\114\1\10\1\245\5\26\23\10\1\221\1\0\1\161\52\26\1\221\1"+
    "\75\4\10\1\36\1\303\2\10\1\221\25\26\2\10\1\221\1\26\3\10\1\25\10\26\7\10"+
    "\1\275\10\26\1\304\1\76\1\142\1\41\2\10\1\114\1\120\4\26\3\10\1\27\20\26\6"+
    "\10\1\221\1\26\2\10\1\221\1\26\2\10\1\47\21\26\11\10\1\130\66\26\1\224\6\10"+
    "\1\0\1\77\3\26\1\124\1\0\2\26\1\224\5\10\1\0\1\305\2\26\3\10\1\130\1\0\1\161"+
    "\1\224\3\10\1\160\1\0\1\144\1\0\10\26\1\224\5\10\1\53\1\0\1\306\1\26\1\0\1"+
    "\161\24\26\5\10\1\53\1\0\1\26\1\0\1\161\46\26\55\10\1\23\22\26\14\10\1\47"+
    "\63\26\5\10\1\23\72\26\7\10\1\130\130\26\10\10\1\27\1\26\1\102\4\0\1\77\1"+
    "\26\1\62\1\224\1\10\14\26\1\25\153\26\1\307\1\310\2\0\1\311\1\2\3\26\1\312"+
    "\22\26\1\313\67\26\12\10\1\31\10\10\1\31\1\314\1\315\1\10\1\316\1\142\7\10"+
    "\1\36\1\317\2\31\3\10\1\320\1\170\1\40\1\75\51\10\1\221\3\10\1\75\2\10\1\206"+
    "\3\10\1\206\2\10\1\31\3\10\1\31\2\10\1\23\3\10\1\23\3\10\1\75\3\10\1\75\2"+
    "\10\1\206\1\321\6\0\1\142\3\10\1\162\1\41\1\206\1\322\1\244\1\323\1\162\1"+
    "\231\1\162\2\206\1\123\1\10\1\35\1\10\1\114\1\324\1\35\1\10\1\114\50\26\32"+
    "\10\1\23\5\26\106\10\1\27\1\26\33\10\1\221\74\26\1\122\3\26\14\0\20\26\36"+
    "\0\2\26");

  /* The ZZ_CMAP_A table has 1704 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\16\1\3\1\2\2\1\1\2\6\16\4\0\1\3\1\30\1\7\1\42\1\15\1\40\1\36\1\11\1\17"+
    "\1\20\1\6\1\34\1\44\1\12\1\14\1\4\12\13\1\33\1\43\1\21\1\27\1\22\1\32\1\41"+
    "\22\15\1\23\1\10\1\24\1\37\1\15\1\0\1\45\1\50\1\65\1\63\1\54\1\62\1\61\1\56"+
    "\1\60\2\15\1\52\1\67\1\46\1\51\1\70\1\15\1\57\1\55\1\53\1\64\1\66\2\15\1\47"+
    "\1\15\1\25\1\35\1\26\1\31\6\16\1\5\2\16\1\3\1\0\4\15\4\0\1\15\2\0\1\16\7\0"+
    "\1\15\4\0\1\15\5\0\7\15\1\0\2\15\4\0\4\15\16\0\5\15\7\0\1\15\1\0\1\15\1\0"+
    "\5\15\1\0\2\15\2\0\4\15\10\0\1\15\1\0\3\15\1\0\1\15\1\0\4\15\1\0\13\15\1\0"+
    "\3\15\1\0\5\16\2\0\6\15\1\0\7\15\1\0\1\15\15\0\1\15\1\0\15\16\1\0\1\16\1\0"+
    "\2\16\1\0\2\16\1\0\1\16\3\15\5\0\5\16\6\0\1\15\4\0\3\16\5\0\3\15\7\16\4\0"+
    "\2\15\1\16\13\15\1\0\1\15\7\16\2\15\2\16\1\0\4\16\2\15\2\16\3\15\2\0\1\15"+
    "\7\0\1\16\1\15\1\16\6\15\3\16\2\0\11\15\3\16\1\15\6\0\2\16\6\15\4\16\2\15"+
    "\2\0\2\16\1\15\11\16\1\15\3\16\1\15\5\16\2\0\1\15\3\16\4\0\1\15\1\0\6\15\4"+
    "\0\13\16\1\0\4\16\6\15\3\16\1\15\2\16\1\15\7\16\2\15\2\16\2\0\2\16\1\0\3\16"+
    "\1\0\10\15\2\0\2\15\2\0\6\15\1\0\1\15\3\0\4\15\2\0\1\16\1\15\7\16\2\0\2\16"+
    "\2\0\3\16\1\15\5\0\2\15\1\0\5\15\4\0\3\15\4\0\2\15\1\0\2\15\1\0\2\15\1\0\2"+
    "\15\2\0\1\16\1\0\5\16\4\0\2\16\2\0\3\16\3\0\1\16\7\0\4\15\1\0\1\15\7\0\4\16"+
    "\3\15\1\16\2\0\1\15\1\0\2\15\1\0\3\15\2\16\1\0\3\16\2\0\1\15\11\0\1\16\1\15"+
    "\1\0\6\15\3\0\3\15\1\0\4\15\3\0\2\15\1\0\1\15\1\0\2\15\3\0\2\15\3\0\2\15\4"+
    "\0\5\16\3\0\3\16\1\0\4\16\2\0\1\15\6\0\1\16\4\15\1\0\5\15\3\0\1\15\7\16\1"+
    "\0\2\16\5\0\2\16\3\0\2\16\1\0\3\15\1\0\2\15\5\0\3\15\2\0\1\15\3\16\1\0\4\16"+
    "\1\15\1\0\4\15\1\0\1\15\4\0\1\16\4\0\6\16\1\0\1\16\3\0\2\16\4\0\1\15\1\16"+
    "\2\15\7\16\4\0\10\15\3\16\7\0\2\15\1\0\1\15\2\0\2\15\1\0\1\15\2\0\1\15\6\0"+
    "\4\15\1\0\3\15\1\0\1\15\1\0\1\15\2\0\2\15\1\0\3\15\2\16\1\0\2\16\1\15\2\0"+
    "\5\15\1\0\1\15\1\0\6\16\2\0\2\16\2\0\4\15\5\0\1\16\1\0\1\16\1\0\1\16\4\0\2"+
    "\16\5\15\3\16\6\0\1\16\1\0\7\16\1\15\2\16\4\15\3\16\1\15\3\16\2\15\7\16\3"+
    "\15\4\16\5\15\14\16\1\15\1\16\3\15\1\0\7\15\2\0\3\16\1\3\11\15\3\16\3\0\2"+
    "\15\2\16\4\0\1\15\1\0\2\16\4\0\4\15\10\16\3\0\1\15\3\0\2\15\1\16\5\0\3\16"+
    "\2\0\1\15\1\16\1\15\5\0\6\15\2\0\5\16\3\15\3\0\10\16\5\15\2\16\3\0\3\15\3"+
    "\16\1\0\5\16\4\15\1\16\4\15\3\16\2\15\2\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15"+
    "\2\0\3\15\1\0\6\15\2\0\2\15\13\3\5\16\2\1\5\16\1\3\4\0\1\15\12\0\1\3\2\0\6"+
    "\16\1\0\1\16\3\0\4\16\11\0\1\15\4\0\1\15\1\0\5\15\2\0\1\15\1\0\4\15\1\0\3"+
    "\15\2\0\4\15\5\0\5\15\4\0\1\15\4\0\4\15\3\16\2\15\4\0\1\3\4\0\3\15\1\0\2\16"+
    "\2\0\3\15\6\16\1\0\2\15\2\0\4\15\1\0\2\15\1\16\3\15\1\16\4\15\1\16\10\15\2"+
    "\16\4\0\1\15\1\16\4\0\1\16\5\15\2\16\3\0\3\15\4\0\3\15\2\16\2\0\6\15\1\0\3"+
    "\16\1\0\2\16\5\0\5\15\5\0\1\15\1\16\3\15\1\0\2\15\1\0\7\15\2\0\1\16\6\0\2"+
    "\15\2\0\3\15\3\0\2\15\3\0\2\15\2\0\3\16\4\0\3\15\1\0\2\15\1\0\1\15\5\0\1\16"+
    "\2\0\1\15\3\0\1\15\2\0\2\15\3\16\1\0\2\16\1\0\3\16\2\0\1\16\2\0\1\16\4\15"+
    "\10\0\5\16\3\0\6\16\2\0\3\16\2\0\4\16\4\0\3\16\5\0\1\15\2\0\2\15\2\0\4\15"+
    "\1\0\4\15\1\0\1\15\1\0\6\15\2\0\5\15\1\0\4\15\1\0\4\15\2\0\2\16\1\0\1\15\1"+
    "\0\1\15\5\0\1\15\1\0\1\15\1\0\3\15\1\0\3\15\1\0\3\15");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\16\12\1\41\1\42\1\5\2\0\1\6\1\0"+
    "\1\43\1\44\1\45\1\46\1\12\1\47\4\12\1\50"+
    "\6\12\1\51\1\52\12\12\1\0\1\53\1\54\11\12"+
    "\1\51\1\12\1\55\3\12\1\56\3\12\1\57\1\60"+
    "\2\12\1\42\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\12\12\1\67\3\12\1\70\3\12\1\71\1\72\3\12"+
    "\1\73\1\74\1\75\1\76\1\77\1\12\1\100\2\12"+
    "\1\101\1\102";

  private static int [] zzUnpackAction() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\71\0\344\0\u011d\0\u0156"+
    "\0\u018f\0\71\0\u01c8\0\71\0\71\0\u0201\0\u023a\0\71"+
    "\0\71\0\71\0\71\0\u0273\0\u02ac\0\71\0\71\0\71"+
    "\0\71\0\71\0\71\0\71\0\71\0\71\0\71\0\71"+
    "\0\71\0\u02e5\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b"+
    "\0\u0474\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603"+
    "\0\u063c\0\71\0\u0675\0\u06ae\0\71\0\u06e7\0\71\0\71"+
    "\0\71\0\71\0\u0720\0\u01c8\0\u0759\0\u0792\0\u07cb\0\u0804"+
    "\0\u01c8\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a\0\u0993"+
    "\0\u01c8\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22"+
    "\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u06e7\0\u01c8\0\u0c3f\0\u0c78"+
    "\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u01c8"+
    "\0\u0e40\0\u01c8\0\u0e79\0\u0eb2\0\u0eeb\0\u01c8\0\u0f24\0\u0f5d"+
    "\0\u0f96\0\u01c8\0\u01c8\0\u0fcf\0\u1008\0\71\0\u01c8\0\u01c8"+
    "\0\u01c8\0\u01c8\0\u01c8\0\u01c8\0\u1041\0\u107a\0\u10b3\0\u10ec"+
    "\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242\0\u01c8\0\u127b"+
    "\0\u12b4\0\u12ed\0\u01c8\0\u1326\0\u135f\0\u1398\0\u01c8\0\u01c8"+
    "\0\u13d1\0\u140a\0\u1443\0\u01c8\0\u01c8\0\u01c8\0\u01c8\0\u01c8"+
    "\0\u147c\0\u01c8\0\u14b5\0\u14ee\0\u01c8\0\u01c8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\3\1\5\1\6\1\2\1\7"+
    "\1\10\1\11\1\12\1\13\1\2\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\13\1\44\1\13"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\2\13\1\57\2\13\72\0\3\3\1\0"+
    "\1\3\67\0\1\60\1\0\1\61\62\0\2\6\1\0"+
    "\4\6\1\62\1\63\60\6\2\7\1\0\5\7\1\64"+
    "\1\65\57\7\13\0\1\11\70\0\1\11\1\66\61\0"+
    "\1\13\5\0\1\13\1\0\2\13\26\0\24\13\27\0"+
    "\1\67\70\0\1\70\70\0\1\71\70\0\1\72\46\0"+
    "\1\13\5\0\1\13\1\0\2\13\26\0\1\13\1\73"+
    "\6\13\1\74\13\13\5\0\1\13\5\0\1\13\1\0"+
    "\2\13\26\0\17\13\1\75\4\13\5\0\1\13\5\0"+
    "\1\13\1\0\2\13\26\0\2\13\1\76\1\13\1\77"+
    "\17\13\5\0\1\13\5\0\1\13\1\0\2\13\26\0"+
    "\4\13\1\100\17\13\5\0\1\13\5\0\1\13\1\0"+
    "\2\13\26\0\4\13\1\101\5\13\1\102\11\13\5\0"+
    "\1\13\5\0\1\13\1\0\2\13\26\0\5\13\1\103"+
    "\16\13\5\0\1\13\5\0\1\13\1\0\2\13\26\0"+
    "\6\13\1\104\2\13\1\105\12\13\5\0\1\13\5\0"+
    "\1\13\1\0\2\13\26\0\1\106\23\13\5\0\1\13"+
    "\5\0\1\13\1\0\2\13\26\0\7\13\1\107\14\13"+
    "\5\0\1\13\5\0\1\13\1\0\2\13\26\0\1\13"+
    "\1\110\13\13\1\111\4\13\1\112\1\13\5\0\1\13"+
    "\5\0\1\13\1\0\2\13\26\0\5\13\1\113\16\13"+
    "\5\0\1\13\5\0\1\13\1\0\2\13\26\0\1\114"+
    "\3\13\1\115\1\116\11\13\1\117\4\13\5\0\1\13"+
    "\5\0\1\13\1\0\2\13\26\0\4\13\1\120\17\13"+
    "\5\0\1\13\5\0\1\13\1\0\2\13\26\0\1\121"+
    "\3\13\1\122\2\13\1\123\14\13\1\60\2\0\2\60"+
    "\1\0\63\60\6\61\1\124\62\61\2\6\1\0\66\6"+
    "\2\7\1\0\66\7\13\0\1\125\62\0\1\13\5\0"+
    "\1\13\1\0\2\13\26\0\2\13\1\126\21\13\5\0"+
    "\1\13\5\0\1\13\1\0\2\13\26\0\5\13\1\127"+
    "\16\13\5\0\1\13\5\0\1\13\1\0\2\13\26\0"+
    "\6\13\1\130\15\13\5\0\1\13\5\0\1\13\1\0"+
    "\2\13\26\0\4\13\1\131\17\13\5\0\1\13\5\0"+
    "\1\13\1\0\2\13\26\0\1\13\1\132\22\13\5\0"+
    "\1\13\5\0\1\13\1\0\2\13\26\0\17\13\1\133"+
    "\4\13\5\0\1\13\5\0\1\13\1\0\2\13\26\0"+
    "\10\13\1\134\13\13\5\0\1\13\5\0\1\13\1\0"+
    "\2\13\26\0\1\135\11\13\1\136\11\13\5\0\1\13"+
    "\5\0\1\13\1\0\2\13\26\0\4\13\1\137\17\13"+
    "\5\0\1\13\5\0\1\13\1\0\2\13\26\0\10\13"+
    "\1\140\13\13\5\0\1\13\5\0\1\13\1\0\2\13"+
    "\26\0\6\13\1\141\15\13\5\0\1\13\5\0\1\13"+
    "\1\0\2\13\26\0\6\13\1\142\15\13\5\0\1\13"+
    "\5\0\1\13\1\0\2\13\26\0\23\13\1\143\5\0"+
    "\1\13\5\0\1\13\1\0\2\13\26\0\4\13\1\144"+
    "\17\13\5\0\1\13\5\0\1\13\1\0\2\13\26\0"+
    "\5\13\1\145\16\13\5\0\1\13\5\0\1\13\1\0"+
    "\2\13\26\0\12\13\1\146\11\13\5\0\1\13\5\0"+
    "\1\13\1\0\2\13\26\0\4\13\1\147\17\13\5\0"+
    "\1\13\5\0\1\13\1\0\2\13\26\0\1\13\1\150"+
    "\22\13\5\0\1\13\5\0\1\13\1\0\2\13\26\0"+
    "\17\13\1\151\4\13\5\0\1\13\5\0\1\13\1\0"+
    "\2\13\26\0\5\13\1\152\4\13\1\153\11\13\5\0"+
    "\1\13\5\0\1\13\1\0\2\13\26\0\13\13\1\154"+
    "\10\13\5\0\1\13\5\0\1\13\1\0\2\13\26\0"+
    "\12\13\1\155\11\13\4\61\1\156\1\61\1\124\62\61"+
    "\5\0\1\13\5\0\1\13\1\0\2\13\26\0\5\13"+
    "\1\157\16\13\5\0\1\13\5\0\1\13\1\0\2\13"+
    "\26\0\7\13\1\160\14\13\5\0\1\13\5\0\1\13"+
    "\1\0\2\13\26\0\5\13\1\161\16\13\5\0\1\13"+
    "\5\0\1\13\1\0\2\13\26\0\14\13\1\162\7\13"+
    "\5\0\1\13\5\0\1\13\1\0\2\13\26\0\7\13"+
    "\1\163\14\13\5\0\1\13\5\0\1\13\1\0\2\13"+
    "\26\0\7\13\1\164\14\13\5\0\1\13\5\0\1\13"+
    "\1\0\2\13\26\0\6\13\1\165\15\13\5\0\1\13"+
    "\5\0\1\13\1\0\2\13\26\0\13\13\1\166\10\13"+
    "\5\0\1\13\5\0\1\13\1\0\2\13\26\0\12\13"+
    "\1\167\11\13\5\0\1\13\5\0\1\13\1\0\2\13"+
    "\26\0\17\13\1\170\4\13\5\0\1\13\5\0\1\13"+
    "\1\0\2\13\26\0\4\13\1\171\17\13\5\0\1\13"+
    "\5\0\1\13\1\0\2\13\26\0\3\13\1\172\20\13"+
    "\5\0\1\13\5\0\1\13\1\0\2\13\26\0\10\13"+
    "\1\173\13\13\5\0\1\13\5\0\1\13\1\0\2\13"+
    "\26\0\1\174\23\13\5\0\1\13\5\0\1\13\1\0"+
    "\2\13\26\0\20\13\1\175\3\13\5\0\1\13\5\0"+
    "\1\13\1\0\2\13\26\0\3\13\1\176\20\13\5\0"+
    "\1\13\5\0\1\13\1\0\2\13\26\0\16\13\1\177"+
    "\5\13\5\0\1\13\5\0\1\13\1\0\2\13\26\0"+
    "\10\13\1\200\13\13\5\0\1\13\5\0\1\13\1\0"+
    "\2\13\26\0\13\13\1\201\10\13\5\0\1\13\5\0"+
    "\1\13\1\0\2\13\26\0\1\13\1\202\22\13\5\0"+
    "\1\13\5\0\1\13\1\0\2\13\26\0\6\13\1\203"+
    "\15\13\5\0\1\13\5\0\1\13\1\0\2\13\26\0"+
    "\12\13\1\204\11\13\5\0\1\13\5\0\1\13\1\0"+
    "\2\13\26\0\12\13\1\205\11\13\5\0\1\13\5\0"+
    "\1\13\1\0\2\13\26\0\1\206\23\13\5\0\1\13"+
    "\5\0\1\13\1\0\2\13\26\0\7\13\1\207\14\13"+
    "\5\0\1\13\5\0\1\13\1\0\2\13\26\0\6\13"+
    "\1\210\15\13\5\0\1\13\5\0\1\13\1\0\2\13"+
    "\26\0\6\13\1\211\15\13\5\0\1\13\5\0\1\13"+
    "\1\0\2\13\26\0\5\13\1\212\16\13\5\0\1\13"+
    "\5\0\1\13\1\0\2\13\26\0\13\13\1\213\10\13"+
    "\5\0\1\13\5\0\1\13\1\0\2\13\26\0\20\13"+
    "\1\214\3\13\5\0\1\13\5\0\1\13\1\0\2\13"+
    "\26\0\14\13\1\215\7\13\5\0\1\13\5\0\1\13"+
    "\1\0\2\13\26\0\1\13\1\216\22\13\5\0\1\13"+
    "\5\0\1\13\1\0\2\13\26\0\6\13\1\217\15\13"+
    "\5\0\1\13\5\0\1\13\1\0\2\13\26\0\5\13"+
    "\1\220\16\13\5\0\1\13\5\0\1\13\1\0\2\13"+
    "\26\0\13\13\1\221\10\13\5\0\1\13\5\0\1\13"+
    "\1\0\2\13\26\0\7\13\1\222\14\13\5\0\1\13"+
    "\5\0\1\13\1\0\2\13\26\0\4\13\1\223\17\13"+
    "\5\0\1\13\5\0\1\13\1\0\2\13\26\0\4\13"+
    "\1\224\17\13\5\0\1\13\5\0\1\13\1\0\2\13"+
    "\26\0\1\13\1\225\22\13\5\0\1\13\5\0\1\13"+
    "\1\0\2\13\26\0\1\13\1\226\22\13";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5415];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\4\1\1\11\1\1\2\11"+
    "\2\1\4\11\2\1\14\11\20\1\1\11\2\0\1\11"+
    "\1\0\4\11\31\1\1\0\31\1\1\11\50\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _ZsLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ZsLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 67: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 68: break;
          case 3: 
            { return DIV;
            } 
            // fall through
          case 69: break;
          case 4: 
            { return ASTERISK;
            } 
            // fall through
          case 70: break;
          case 5: 
            { return DOUBLE_QUOTED_STRING;
            } 
            // fall through
          case 71: break;
          case 6: 
            { return SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 72: break;
          case 7: 
            { return MINUS;
            } 
            // fall through
          case 73: break;
          case 8: 
            { return DIGITS;
            } 
            // fall through
          case 74: break;
          case 9: 
            { return DOT;
            } 
            // fall through
          case 75: break;
          case 10: 
            { return IDENTIFIER;
            } 
            // fall through
          case 76: break;
          case 11: 
            { return L_ROUND_BRACKET;
            } 
            // fall through
          case 77: break;
          case 12: 
            { return R_ROUND_BRACKET;
            } 
            // fall through
          case 78: break;
          case 13: 
            { return L_ANGLE_BRACKET;
            } 
            // fall through
          case 79: break;
          case 14: 
            { return R_ANGLE_BRACKET;
            } 
            // fall through
          case 80: break;
          case 15: 
            { return L_SQUARE_BRACKET;
            } 
            // fall through
          case 81: break;
          case 16: 
            { return R_SQUARE_BRACKET;
            } 
            // fall through
          case 82: break;
          case 17: 
            { return L_CURLY_BRACKET;
            } 
            // fall through
          case 83: break;
          case 18: 
            { return R_CURLY_BRACKET;
            } 
            // fall through
          case 84: break;
          case 19: 
            { return EQUAL;
            } 
            // fall through
          case 85: break;
          case 20: 
            { return EXCL;
            } 
            // fall through
          case 86: break;
          case 21: 
            { return TILDE;
            } 
            // fall through
          case 87: break;
          case 22: 
            { return QUEST;
            } 
            // fall through
          case 88: break;
          case 23: 
            { return COLON;
            } 
            // fall through
          case 89: break;
          case 24: 
            { return PLUS;
            } 
            // fall through
          case 90: break;
          case 25: 
            { return OR;
            } 
            // fall through
          case 91: break;
          case 26: 
            { return AND;
            } 
            // fall through
          case 92: break;
          case 27: 
            { return XOR;
            } 
            // fall through
          case 93: break;
          case 28: 
            { return PERC;
            } 
            // fall through
          case 94: break;
          case 29: 
            { return AT;
            } 
            // fall through
          case 95: break;
          case 30: 
            { return HASH;
            } 
            // fall through
          case 96: break;
          case 31: 
            { return SEMICOLON;
            } 
            // fall through
          case 97: break;
          case 32: 
            { return COMMA;
            } 
            // fall through
          case 98: break;
          case 33: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 99: break;
          case 34: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 100: break;
          case 35: 
            { return LESS_EQUAL;
            } 
            // fall through
          case 101: break;
          case 36: 
            { return GREATER_EQUAL;
            } 
            // fall through
          case 102: break;
          case 37: 
            { return EQEQ;
            } 
            // fall through
          case 103: break;
          case 38: 
            { return NOT_EQUAL;
            } 
            // fall through
          case 104: break;
          case 39: 
            { return AS;
            } 
            // fall through
          case 105: break;
          case 40: 
            { return TO;
            } 
            // fall through
          case 106: break;
          case 41: 
            { return IN;
            } 
            // fall through
          case 107: break;
          case 42: 
            { return IF;
            } 
            // fall through
          case 108: break;
          case 43: 
            { return FLOATING_POINT;
            } 
            // fall through
          case 109: break;
          case 44: 
            { return ANY;
            } 
            // fall through
          case 110: break;
          case 45: 
            { return INT;
            } 
            // fall through
          case 111: break;
          case 46: 
            { return FOR;
            } 
            // fall through
          case 112: break;
          case 47: 
            { return VAL;
            } 
            // fall through
          case 113: break;
          case 48: 
            { return VAR;
            } 
            // fall through
          case 114: break;
          case 49: 
            { return NULL;
            } 
            // fall through
          case 115: break;
          case 50: 
            { return BYTE;
            } 
            // fall through
          case 116: break;
          case 51: 
            { return BOOL;
            } 
            // fall through
          case 117: break;
          case 52: 
            { return LONG;
            } 
            // fall through
          case 118: break;
          case 53: 
            { return TRUE;
            } 
            // fall through
          case 119: break;
          case 54: 
            { return ELSE;
            } 
            // fall through
          case 120: break;
          case 55: 
            { return VOID;
            } 
            // fall through
          case 121: break;
          case 56: 
            { return SHORT;
            } 
            // fall through
          case 122: break;
          case 57: 
            { return FALSE;
            } 
            // fall through
          case 123: break;
          case 58: 
            { return FLOAT;
            } 
            // fall through
          case 124: break;
          case 59: 
            { return STATIC;
            } 
            // fall through
          case 125: break;
          case 60: 
            { return STRING;
            } 
            // fall through
          case 126: break;
          case 61: 
            { return RETURN;
            } 
            // fall through
          case 127: break;
          case 62: 
            { return IMPORT;
            } 
            // fall through
          case 128: break;
          case 63: 
            { return GLOBAL;
            } 
            // fall through
          case 129: break;
          case 64: 
            { return DOUBLE;
            } 
            // fall through
          case 130: break;
          case 65: 
            { return VERSION;
            } 
            // fall through
          case 131: break;
          case 66: 
            { return FUNCTION;
            } 
            // fall through
          case 132: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
